{"version":3,"sources":["config/index.js","substrate-lib/SubstrateContext.js","substrate-lib/utils.js","substrate-lib/components/TxButton.js","substrate-lib/components/DeveloperConsole.js","ContractExplorer.js","EraStaked.js","EraNumber.js","DSInteractor.js","DappsCount.js","NodeInfo.js","Network.js","App.js","index.js"],"names":["configEnv","require","types","envVars","reduce","mem","n","undefined","process","slice","config","configCommon","connectedSocket","queryString","parse","window","location","search","rpc","PROVIDER_SOCKET","console","log","INIT_STATE","socket","jsonrpc","RPC","keyring","keyringState","api","apiError","apiState","reducer","state","action","type","payload","Error","loadAccts","SubstrateContext","React","createContext","SubstrateContextProvider","props","initState","forEach","key","useReducer","dispatch","provider","WsProvider","_api","ApiPromise","on","isReady","then","err","connect","asyncLoadAccounts","a","web3Enable","APP_NAME","web3Accounts","allAccounts","map","address","meta","name","source","loadAll","isDevelopment","DEVELOPMENT_KEYRING","error","loadAccounts","Provider","value","children","useSubstrate","useContext","utils","paramConversion","num","TxButton","accountPair","label","setStatus","color","style","attrs","disabled","useState","unsub","setUnsub","sudoKey","setSudoKey","palletRpc","callable","inputParams","paramFields","isSudo","isUncheckedSudo","useEffect","query","sudo","isEmpty","toString","acctPair","getFromAcct","isInjected","web3FromSource","injected","fromAcct","setSigner","signer","txResHandler","status","isFinalized","asFinalized","txErrHandler","sudoTx","transformed","transformParams","txExecute","tx","signAndSend","catch","uncheckedSudoTx","sudoUncheckedWeight","signedTx","unsignedTx","send","queryResHandler","result","isNone","emptyAsNull","constant","consts","transaction","opts","paramVal","inputParam","trim","params","field","ind","memo","converted","indexOf","split","e","single","isNumType","Number","parseFloat","parseInt","some","el","Button","basic","onClick","length","every","paramField","param","optional","TxGroupButton","Group","Or","DeveloperConsole","util","utilCrypto","Main","callables","setCallables","selectedContract","setSelectedContract","lastClaimed","setLastClaimed","lastStaked","setLastStaked","formState","setFormState","developer","setDeveloper","totalStaked","setTotalStaked","claimedRewards","setClaimedRewards","numStakers","setNumStakers","previousStaked","setPreviousStaked","getAddressEnum","dappsStaking","registeredDapps","keys","r","c","text","_","data","res","contractLastStaked","unwrap","queryLastStaked","contractLastClaimed","toHuman","queryLastClaimed","queryDeveloper","contractEraStake","total","claimed_rewards","former_staked_era","stakers","size","Grid","Column","width","Form","Field","Dropdown","placeholder","fluid","onChange","selection","options","DisplayTable","contract","overflowWrap","alt","src","Table","Header","Row","HeaderCell","Body","Cell","as","Content","Subheader","Icon","ContractExplorer","DECIMALS","era","setCurrentEra","stakedTotal","setStakedTotal","rewards","setRewards","unsubscribe","currentEra","toNumber","eraRewardsAndStakes","tvl","staked","valueOf","blockRewardAccumulator","reward","Card","textAlign","Statistic","extra","EraStaked","blockCountdown","setBlockCountdown","progress","setProgress","blockPerEra","bestNumber","derive","chain","unsubscribeAll","number","Progress","percent","indicating","success","CurrentEra","argIsOptional","arg","startsWith","interxType","setInterxType","palletRPCs","setParamFields","initFormState","Object","getApiType","sort","metaType","isPlain","isMap","asMap","isDoubleMap","asDoubleMap","key1","key2","metaArgs","args","metaParam","isOptional","onPalletCallableParamChange","onInterxTypeChange","ev","getOptionalMsg","overflowX","inline","Radio","checked","Input","Label","pointing","content","InteractorSubmit","DSInteractor","dappsCount","setDappsCount","preApproval","setPreApproval","preApprovalIsEnabled","DappsCount","nodeInfo","setNodeInfo","getInfo","Promise","all","system","version","nodeName","nodeVersion","Meta","Description","NodeInfo","networkSelected","setNetworkSelected","networkOptions","initialNetwork","Container","clearable","dropdown","network","Network","accountAddress","getPair","loader","Dimmer","active","Loader","centered","columns","padded","Message","negative","compact","floating","header","JSON","stringify","contextRef","createRef","ref","Sticky","context","Divider","stackable","Image","stretched","Segment","raised","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.15bdec55.chunk.js","sourcesContent":["import configCommon from './common.json';\n// Using `require` as `import` does not support dynamic loading (yet).\nconst configEnv = require(`./${process.env.NODE_ENV}.json`);\nconst types = require('./types.json');\n\n// Accepting React env vars and aggregating them into `config` object.\nconst envVarNames = [\n  'REACT_APP_PROVIDER_SOCKET',\n  'REACT_APP_DEVELOPMENT_KEYRING'\n];\nconst envVars = envVarNames.reduce((mem, n) => {\n  // Remove the `REACT_APP_` prefix\n  if (process.env[n] !== undefined) mem[n.slice(10)] = process.env[n];\n  return mem;\n}, {});\n\nconst config = { ...configCommon, ...configEnv, ...envVars, types };\nexport default config;\n","import React, { useReducer, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport jsonrpc from '@polkadot/types/interfaces/jsonrpc';\nimport queryString from 'query-string';\n\nimport { ApiPromise, WsProvider } from '@polkadot/api';\nimport { web3Accounts, web3Enable } from '@polkadot/extension-dapp';\nimport keyring from '@polkadot/ui-keyring';\n\nimport config from '../config';\n\nconst parsedQuery = queryString.parse(window.location.search);\nconst connectedSocket = parsedQuery.rpc || config.PROVIDER_SOCKET;\nconsole.log(`Connected socket: ${connectedSocket}`);\n\n///\n// Initial state for `useReducer`\n\nconst INIT_STATE = {\n  socket: connectedSocket,\n  jsonrpc: { ...jsonrpc, ...config.RPC },\n  types: config.types,\n  keyring: null,\n  keyringState: null,\n  api: null,\n  apiError: null,\n  apiState: null\n};\n\n///\n// Reducer function for `useReducer`\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'CONNECT_INIT':\n      return { ...state, apiState: 'CONNECT_INIT' };\n\n    case 'CONNECT':\n      return { ...state, api: action.payload, apiState: 'CONNECTING' };\n\n    case 'CONNECT_SUCCESS':\n      return { ...state, apiState: 'READY' };\n\n    case 'CONNECT_ERROR':\n      return { ...state, apiState: 'ERROR', apiError: action.payload };\n\n    case 'LOAD_KEYRING':\n      return { ...state, keyringState: 'LOADING' };\n\n    case 'SET_KEYRING':\n      return { ...state, keyring: action.payload, keyringState: 'READY' };\n\n    case 'KEYRING_ERROR':\n      return { ...state, keyring: null, keyringState: 'ERROR' };\n\n    default:\n      throw new Error(`Unknown type: ${action.type}`);\n  }\n};\n\n///\n// Connecting to the Substrate node\n\nconst connect = (state, dispatch) => {\n  const { apiState, socket, jsonrpc, types } = state;\n  // We only want this function to be performed once\n  if (apiState) return;\n\n  dispatch({ type: 'CONNECT_INIT' });\n\n  const provider = new WsProvider(socket);\n  const _api = new ApiPromise({ provider, types, rpc: jsonrpc });\n\n  // Set listeners for disconnection and reconnection event.\n  _api.on('connected', () => {\n    dispatch({ type: 'CONNECT', payload: _api });\n    // `ready` event is not emitted upon reconnection and is checked explicitly here.\n    _api.isReady.then((_api) => dispatch({ type: 'CONNECT_SUCCESS' }));\n  });\n  _api.on('ready', () => dispatch({ type: 'CONNECT_SUCCESS' }));\n  _api.on('error', err => dispatch({ type: 'CONNECT_ERROR', payload: err }));\n};\n\n///\n// Loading accounts from dev and polkadot-js extension\n\nlet loadAccts = false;\nconst loadAccounts = (state, dispatch) => {\n  const asyncLoadAccounts = async () => {\n    dispatch({ type: 'LOAD_KEYRING' });\n    try {\n      await web3Enable(config.APP_NAME);\n      let allAccounts = await web3Accounts();\n      allAccounts = allAccounts.map(({ address, meta }) =>\n        ({ address, meta: { ...meta, name: `${meta.name} (${meta.source})` } }));\n      keyring.loadAll({ isDevelopment: config.DEVELOPMENT_KEYRING }, allAccounts);\n      dispatch({ type: 'SET_KEYRING', payload: keyring });\n    } catch (e) {\n      console.error(e);\n      dispatch({ type: 'KEYRING_ERROR' });\n    }\n  };\n\n  const { keyringState } = state;\n  // If `keyringState` is not null `asyncLoadAccounts` is running.\n  if (keyringState) return;\n  // If `loadAccts` is true, the `asyncLoadAccounts` has been run once.\n  if (loadAccts) return dispatch({ type: 'SET_KEYRING', payload: keyring });\n\n  // This is the heavy duty work\n  loadAccts = true;\n  asyncLoadAccounts();\n};\n\nconst SubstrateContext = React.createContext();\n\nconst SubstrateContextProvider = (props) => {\n  // filtering props and merge with default param value\n  const initState = { ...INIT_STATE };\n  const neededPropNames = ['socket', 'types'];\n  neededPropNames.forEach(key => {\n    initState[key] = (typeof props[key] === 'undefined' ? initState[key] : props[key]);\n  });\n\n  const [state, dispatch] = useReducer(reducer, initState);\n  connect(state, dispatch);\n  loadAccounts(state, dispatch);\n\n  return <SubstrateContext.Provider value={state}>\n    {props.children}\n  </SubstrateContext.Provider>;\n};\n\n// prop typechecking\nSubstrateContextProvider.propTypes = {\n  socket: PropTypes.string,\n  types: PropTypes.object\n};\n\nconst useSubstrate = () => ({ ...useContext(SubstrateContext) });\n\nexport { SubstrateContextProvider, useSubstrate };\n","const utils = {\n  paramConversion: {\n    num: [\n      'Compact<Balance>',\n      'BalanceOf',\n      'u8', 'u16', 'u32', 'u64', 'u128',\n      'i8', 'i16', 'i32', 'i64', 'i128'\n    ]\n  }\n};\n\nexport default utils;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from 'semantic-ui-react';\nimport { web3FromSource } from '@polkadot/extension-dapp';\n\nimport { useSubstrate } from '../';\nimport utils from '../utils';\n\nfunction TxButton ({\n  accountPair = null,\n  label,\n  setStatus,\n  color = 'blue',\n  style = null,\n  type = 'QUERY',\n  attrs = null,\n  disabled = false\n}) {\n  // Hooks\n  const { api } = useSubstrate();\n  const [unsub, setUnsub] = useState(null);\n  const [sudoKey, setSudoKey] = useState(null);\n\n  const { palletRpc, callable, inputParams, paramFields } = attrs;\n\n  const isQuery = () => type === 'QUERY';\n  const isSudo = () => type === 'SUDO-TX';\n  const isUncheckedSudo = () => type === 'UNCHECKED-SUDO-TX';\n  const isUnsigned = () => type === 'UNSIGNED-TX';\n  const isSigned = () => type === 'SIGNED-TX';\n  const isRpc = () => type === 'RPC';\n  const isConstant = () => type === 'CONSTANT';\n\n  const loadSudoKey = () => {\n    (async function () {\n      if (!api || !api.query.sudo) { return; }\n      const sudoKey = await api.query.sudo.key();\n      sudoKey.isEmpty ? setSudoKey(null) : setSudoKey(sudoKey.toString());\n    })();\n  };\n\n  useEffect(loadSudoKey, [api]);\n\n  const getFromAcct = async () => {\n    const {\n      address,\n      meta: { source, isInjected }\n    } = accountPair;\n    let fromAcct;\n\n    // signer is from Polkadot-js browser extension\n    if (isInjected) {\n      const injected = await web3FromSource(source);\n      fromAcct = address;\n      api.setSigner(injected.signer);\n    } else {\n      fromAcct = accountPair;\n    }\n\n    return fromAcct;\n  };\n\n  const txResHandler = ({ status }) =>\n    status.isFinalized\n      ? setStatus(`😉 Finalized. Block hash: ${status.asFinalized.toString()}`)\n      : setStatus(`Current transaction status: ${status.type}`);\n\n  const txErrHandler = err =>\n    setStatus(`😞 Transaction Failed: ${err.toString()}`);\n\n  const sudoTx = async () => {\n    const fromAcct = await getFromAcct();\n    const transformed = transformParams(paramFields, inputParams);\n    // transformed can be empty parameters\n    const txExecute = transformed\n      ? api.tx.sudo.sudo(api.tx[palletRpc][callable](...transformed))\n      : api.tx.sudo.sudo(api.tx[palletRpc][callable]());\n\n    const unsub = txExecute.signAndSend(fromAcct, txResHandler)\n      .catch(txErrHandler);\n    setUnsub(() => unsub);\n  };\n\n  const uncheckedSudoTx = async () => {\n    const fromAcct = await getFromAcct();\n    const txExecute =\n        api.tx.sudo.sudoUncheckedWeight(api.tx[palletRpc][callable](...inputParams), 0);\n\n    const unsub = txExecute.signAndSend(fromAcct, txResHandler)\n      .catch(txErrHandler);\n    setUnsub(() => unsub);\n  };\n\n  const signedTx = async () => {\n    const fromAcct = await getFromAcct();\n    const transformed = transformParams(paramFields, inputParams);\n    // transformed can be empty parameters\n\n    const txExecute = transformed\n      ? api.tx[palletRpc][callable](...transformed)\n      : api.tx[palletRpc][callable]();\n\n    const unsub = await txExecute.signAndSend(fromAcct, txResHandler)\n      .catch(txErrHandler);\n    setUnsub(() => unsub);\n  };\n\n  const unsignedTx = async () => {\n    const transformed = transformParams(paramFields, inputParams);\n    // transformed can be empty parameters\n    const txExecute = transformed\n      ? api.tx[palletRpc][callable](...transformed)\n      : api.tx[palletRpc][callable]();\n\n    const unsub = await txExecute.send(txResHandler)\n      .catch(txErrHandler);\n    setUnsub(() => unsub);\n  };\n\n  const queryResHandler = result =>\n    result.isNone ? setStatus('None') : setStatus(result.toString());\n\n  const query = async () => {\n    const transformed = transformParams(paramFields, inputParams);\n    const unsub = await api.query[palletRpc][callable](...transformed, queryResHandler);\n    setUnsub(() => unsub);\n  };\n\n  const rpc = async () => {\n    const transformed = transformParams(paramFields, inputParams, { emptyAsNull: false });\n    const unsub = await api.rpc[palletRpc][callable](...transformed, queryResHandler);\n    setUnsub(() => unsub);\n  };\n\n  const constant = () => {\n    const result = api.consts[palletRpc][callable];\n    result.isNone ? setStatus('None') : setStatus(result.toString());\n  };\n\n  const transaction = async () => {\n    if (unsub) {\n      unsub();\n      setUnsub(null);\n    }\n\n    setStatus('Sending...');\n\n    (isSudo() && sudoTx()) ||\n    (isUncheckedSudo() && uncheckedSudoTx()) ||\n    (isSigned() && signedTx()) ||\n    (isUnsigned() && unsignedTx()) ||\n    (isQuery() && query()) ||\n    (isRpc() && rpc()) ||\n    (isConstant() && constant());\n  };\n\n  const transformParams = (paramFields, inputParams, opts = { emptyAsNull: true }) => {\n    // if `opts.emptyAsNull` is true, empty param value will be added to res as `null`.\n    //   Otherwise, it will not be added\n    const paramVal = inputParams.map(inputParam => {\n      // To cater the js quirk that `null` is a type of `object`.\n      if (typeof inputParam === 'object' && inputParam !== null && typeof inputParam.value === 'string') {\n        return inputParam.value.trim();\n      } else if (typeof inputParam === 'string') {\n        return inputParam.trim();\n      }\n      return inputParam;\n    });\n    const params = paramFields.map((field, ind) => ({ ...field, value: paramVal[ind] || null }));\n\n    return params.reduce((memo, { type = 'string', value }) => {\n      if (value == null || value === '') return (opts.emptyAsNull ? [...memo, null] : memo);\n\n      let converted = value;\n\n      // Deal with a vector\n      if (type.indexOf('Vec<') >= 0) {\n        converted = converted.split(',').map(e => e.trim());\n        converted = converted.map(single => isNumType(type)\n          ? (single.indexOf('.') >= 0 ? Number.parseFloat(single) : Number.parseInt(single))\n          : single\n        );\n        return [...memo, converted];\n      }\n\n      // Deal with a single value\n      if (isNumType(type)) {\n        converted = converted.indexOf('.') >= 0 ? Number.parseFloat(converted) : Number.parseInt(converted);\n      }\n      return [...memo, converted];\n    }, []);\n  };\n\n  const isNumType = type =>\n    utils.paramConversion.num.some(el => type.indexOf(el) >= 0);\n\n  const allParamsFilled = () => {\n    if (paramFields.length === 0) { return true; }\n\n    return paramFields.every((paramField, ind) => {\n      const param = inputParams[ind];\n      if (paramField.optional) { return true; }\n      if (param == null) { return false; }\n\n      const value = typeof param === 'object' ? param.value : param;\n      return value !== null && value !== '';\n    });\n  };\n\n  const isSudoer = acctPair => {\n    if (!sudoKey || !acctPair) { return false; }\n    return acctPair.address === sudoKey;\n  };\n\n  return (\n    <Button\n      basic\n      color={color}\n      style={style}\n      type='submit'\n      onClick={transaction}\n      disabled={ disabled || !palletRpc || !callable || !allParamsFilled() ||\n        ((isSudo() || isUncheckedSudo()) && !isSudoer(accountPair)) }\n    >\n      {label}\n    </Button>\n  );\n}\n\n// prop type checking\nTxButton.propTypes = {\n  accountPair: PropTypes.object,\n  setStatus: PropTypes.func.isRequired,\n  type: PropTypes.oneOf([\n    'QUERY', 'RPC', 'SIGNED-TX', 'UNSIGNED-TX', 'SUDO-TX', 'UNCHECKED-SUDO-TX',\n    'CONSTANT']).isRequired,\n  attrs: PropTypes.shape({\n    palletRpc: PropTypes.string,\n    callable: PropTypes.string,\n    inputParams: PropTypes.array,\n    paramFields: PropTypes.array\n  }).isRequired\n};\n\nfunction TxGroupButton (props) {\n  return (\n    <Button.Group>\n      <TxButton\n        label='Unsigned'\n        type='UNSIGNED-TX'\n        color='grey'\n        {...props}\n      />\n      <Button.Or />\n      <TxButton\n        label='Signed'\n        type='SIGNED-TX'\n        color='blue'\n        {...props}\n      />\n      <Button.Or />\n      <TxButton\n        label='SUDO'\n        type='SUDO-TX'\n        color='red'\n        {...props}\n      />\n    </Button.Group>\n  );\n}\n\nexport { TxButton, TxGroupButton };\n","// This component will simply add utility functions to your developer console.\nimport { useSubstrate } from '../';\n\nexport default function DeveloperConsole (props) {\n  const { api, apiState, keyring, keyringState } = useSubstrate();\n  if (apiState === 'READY') { window.api = api; }\n  if (keyringState === 'READY') { window.keyring = keyring; }\n  window.util = require('@polkadot/util');\n  window.utilCrypto = require('@polkadot/util-crypto');\n\n  return null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Grid, Form, Dropdown, Table, Header, Image, Menu, Icon } from 'semantic-ui-react';\nimport { useSubstrate } from './substrate-lib';\nimport Stakers from './Stakers';\n\n\nfunction Main(props) {\n  const { api } = useSubstrate();\n  const [callables, setCallables] = useState([]);\n  const [selectedContract, setSelectedContract] = useState(0);\n  const [lastClaimed, setLastClaimed] = useState(0);\n  const [lastStaked, setLastStaked] = useState(0);\n  const [formState, setFormState] = useState(0);\n  const [developer, setDeveloper] = useState(0);\n  const [totalStaked, setTotalStaked] = useState(0);\n  const [claimedRewards, setClaimedRewards] = useState(0);\n  const [numStakers, setNumStakers] = useState(0);\n  const [previousStaked, setPreviousStaked] = useState(0);\n  const [stakers, setStakers] = useState([]);\n\n  const getAddressEnum = (address) => (\n    { 'Evm': address }\n  );\n\n  const updateCallables = () => {\n    api.query.dappsStaking.registeredDapps.keys().then(\n      result => {\n        console.log('registeredDapps result', result);\n        const r = result.map(c => '0x' + c.toString().slice(-40))\n        console.log(r);\n        const callables = r.map(c => ({ key: c, value: c, text: c }));\n        console.log('updateCallables callables', callables);\n        setCallables(callables);\n      }\n    )\n      .catch(console.error);\n  };\n\n  const resetContractInfo = () => {\n    setDeveloper(0);\n    setLastStaked(0);\n    setLastClaimed(0);\n    setNumStakers('?');\n    setClaimedRewards('?');\n  };\n\n  const onContractChange = (_, data) => {\n    resetContractInfo()\n    console.log('onContractChange value', data.value);\n    setSelectedContract(data.value);\n    setFormState(data.value);\n  };\n\n  const queryLastClaimed = () => {\n    let res;\n    api.query.dappsStaking.contractLastClaimed(getAddressEnum(selectedContract), result => {\n      result.isNone ? res = 'never' : res = result.unwrap().toHuman();\n      console.log('queryLastClaimed res', res);\n      setLastClaimed(res);\n    })\n      .catch(console.error);\n  }\n\n  const queryLastStaked = () => {\n    let res;\n    api.query.dappsStaking.contractLastStaked(getAddressEnum(selectedContract), result => {\n      result.isNone ? res = 'never' : res = result.unwrap().toString();\n      console.log('queryLastStaked res', res);\n      setLastStaked(res);\n    })\n      .catch(console.error);\n  }\n\n  const queryDeveloper = () => {\n    console.log('queryDeveloper selectedContract is', selectedContract);\n    let res;\n    api.query.dappsStaking.registeredDapps(getAddressEnum(selectedContract), result => {\n      result.isNone ? res = 'none' : res = result.unwrap().toHuman();\n      console.log('queryDeveloper res', res);\n      setDeveloper(res);\n    })\n      .catch(console.error);\n  }\n\n  const queryContractEraStake = () => {\n    console.log('queryContractEraStake selectedContract is', selectedContract, \"last staked\", lastStaked);\n    api.query.dappsStaking.contractEraStake(getAddressEnum(selectedContract), lastStaked, result => {\n      if (result.isNone) {\n        console.log('queryContractEraStake result.isNone');\n        setTotalStaked(0);\n        setClaimedRewards(0);\n        setNumStakers(0);\n      }\n      else {\n        console.log('queryContractEraStake res', result.unwrap().toHuman());\n        setTotalStaked(result.unwrap().total.toHuman());\n        console.log('queryContractEraStake total', result.unwrap().total.toHuman());\n        setClaimedRewards(result.unwrap().claimed_rewards.toHuman());\n        console.log('queryContractEraStake total', result.unwrap().claimed_rewards.toHuman());\n        setPreviousStaked(result.unwrap().former_staked_era.toString());\n        setNumStakers(result.unwrap().stakers.size);\n        console.log('queryContractEraStake total', result.unwrap().stakers.size);\n        // const s = result.unwrap().stakers.map(entry => ({ account: entry, staked: entry}));\n        let stakerList;\n\n        // stakerList = Object.entries(result.unwrap().stakers.toHuman()).map((key, value) =>({account: key, staked: value}) )\n        // for (const [key, value] of Object.entries(result.unwrap().stakers.toHuman())) {\n        //   stakerList[key] = value;\n        // }\n        // setStakers(stakerList)\n        // console.log('queryContractEraStake stakers', stakerList);\n\n        //setStakers(result.unwrap().stakers);\n      };\n    })\n      .catch(console.error);\n  }\n\n  const doQuery = (_, data) => {\n    console.log('doQuery selectedContract is', selectedContract);\n    queryLastStaked();\n    queryLastClaimed();\n  };\n\n  const doQueryContractInfo = () => {\n    queryDeveloper();\n    queryContractEraStake();\n  }\n\n  useEffect(updateCallables, [api.query.dappsStaking]);\n  useEffect(doQuery, [selectedContract]);\n  useEffect(doQueryContractInfo, [lastStaked]);\n\n  return (\n    <Grid.Column width={8}>\n      <h1>Contract Explorer</h1>\n      <Form>\n        <Form.Field>\n          <Dropdown\n            placeholder='Contract'\n            fluid\n            label='Contract'\n            onChange={onContractChange}\n            search\n            selection\n            value={formState}\n            options={callables}\n          />\n        </Form.Field>\n        <DisplayTable\n          developer={developer}\n          numStakers={numStakers}\n          lastClaimed={lastClaimed}\n          lastStaked={lastStaked}\n          totalStaked={totalStaked}\n          claimedRewards={claimedRewards}\n          contract={selectedContract}\n          previousStaked={previousStaked}\n        />\n        {/* <DisplayAllTable\n          contracts = {callables}\n        /> */}\n        {/* <Stakers \n          contract={selectedContract}\n          /> */}\n      </Form>\n    </Grid.Column>\n  );\n}\n\nfunction DisplayPlain(props) {\n  return <div style={{ overflowWrap: 'break-word' }}>\n    <img alt='robots' src={`https://robohash.org/${props.contract}`} />\n    <h3> contract = {props.contract} </h3>\n    <h3> developer = {props.developer} </h3>\n    <h3> lastClaimed = {props.lastClaimed} </h3>\n    <h3> lastStaked = {props.lastStaked} </h3>\n    <h3> totalStaked = {props.totalStaked} </h3>\n    <h3> claimed rewards = {props.claimedRewards} </h3>\n    <h3> number of stakers = {props.numStakers} </h3>\n    {/* <h3> stakers = {stakers} </h3> */}\n  </div>\n}\n\nfunction DisplayTable(props) {\n  return <div style={{ overflowWrap: 'break-word' }}>\n    <img alt='robots' src={`https://robohash.org/${props.contract}`} />\n    <Table>\n    <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell >Contract Address</Table.HeaderCell>\n          <Table.HeaderCell >{props.contract}</Table.HeaderCell>\n        </Table.Row>\n        <Table.Row>\n          <Table.HeaderCell >Developer's account:</Table.HeaderCell>\n          <Table.HeaderCell >{props.developer}</Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        <Table.Row>\n          <Table.Cell>\n            <Header as='h2'>\n              <Header.Content>\n                {props.lastStaked}\n                <Header.Subheader>Contract Last Staked</Header.Subheader>\n              </Header.Content>\n            </Header>\n          </Table.Cell>\n          <Table.Cell >\n            <Header as='h2'>\n              <Header.Content>\n                {props.lastClaimed}\n                <Header.Subheader>Contract Last Claimed</Header.Subheader>\n              </Header.Content>\n            </Header>\n          </Table.Cell>\n          <Table.Cell>\n            <Header as='h2'>\n              <Header.Content>\n                <Icon name='user' />\n                {props.numStakers}\n                <Header.Subheader>Number of Stakers</Header.Subheader>\n              </Header.Content>\n            </Header>\n          </Table.Cell>\n        </Table.Row>\n        <Table.Row>\n          <Table.Cell>\n            <Header as='h2'>\n              <Header.Content>\n                {props.totalStaked}\n                <Header.Subheader>Total Staked</Header.Subheader>\n              </Header.Content>\n            </Header>\n          </Table.Cell>\n          <Table.Cell >\n            <Header as='h2'>\n              <Header.Content>\n                {props.claimedRewards}\n                <Header.Subheader>Claimed Rewards</Header.Subheader>\n              </Header.Content>\n            </Header>\n          </Table.Cell>\n          <Table.Cell>\n            <Header as='h2'>\n              <Header.Content>\n                {props.previousStaked}\n                <Header.Subheader>Previously staked era</Header.Subheader>\n              </Header.Content>\n            </Header>\n          </Table.Cell>\n        </Table.Row>\n      </Table.Body>\n    </Table>\n  </div>\n}\n\nfunction DisplayAllTable(props) {\n  console.log(props.contracts);\n  return <div style={{ overflowWrap: 'break-word' }}>\n    <Table celled>\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell>Contract</Table.HeaderCell>\n          <Table.HeaderCell>Last Staked</Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n\n      <Table.Body>\n        {\n          props.contracts && props.contracts.map((contract) =>\n            <Table.Row\n              key={contract}>\n              <Table.Cell>{contract.key}</Table.Cell>\n              <Table.Cell>{contract.key}</Table.Cell>\n            </Table.Row>\n          )\n        }\n      </Table.Body>\n\n      <Table.Footer>\n        <Table.Row>\n          <Table.HeaderCell colSpan='3'>\n            <Menu floated='right' pagination>\n              <Menu.Item as='a' icon>\n                <Icon name='chevron left' />\n              </Menu.Item>\n              <Menu.Item as='a'>1</Menu.Item>\n              <Menu.Item as='a'>2</Menu.Item>\n              <Menu.Item as='a'>3</Menu.Item>\n              <Menu.Item as='a'>4</Menu.Item>\n              <Menu.Item as='a' icon>\n                <Icon name='chevron right' />\n              </Menu.Item>\n            </Menu>\n          </Table.HeaderCell>\n        </Table.Row>\n      </Table.Footer>\n    </Table>\n  </div>\n}\n\nexport default function ContractExplorer(props) {\n  const { api } = useSubstrate();\n  return api ? <Main {...props} /> : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Statistic, Grid, Card, Icon } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\nconst DECIMALS = 1_000_000_000_000_000_000;\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const [era, setCurrentEra] = useState(0);\n  const [stakedTotal, setStakedTotal] = useState(0);\n  const [rewards, setRewards] = useState(0);\n\n  useEffect(() => {\n    let unsubscribe;\n    api.query.dappsStaking.currentEra(e => {\n      setCurrentEra(e.toNumber());\n    });\n\n    api.query.dappsStaking.eraRewardsAndStakes(era, (result) => {\n      if (result.isNone) {\n        setStakedTotal('<None>');\n      } else {\n        const tvl = parseInt(result.unwrap().staked.valueOf() / DECIMALS);\n        setStakedTotal(tvl);\n      }\n    })\n    .catch(console.error);\n\n    api.query.dappsStaking.blockRewardAccumulator( (result) => {\n      if (result.isNone) {\n        setRewards('<None>');\n      } else {\n        const reward = parseInt(result / DECIMALS);\n        setRewards(reward);\n      }\n    })\n    .catch(console.error);\n    \n    return () => unsubscribe && unsubscribe();\n  }, [api.query.dappsStaking.blockRewardAccumulator, era]);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content textAlign='center'>\n          <Statistic\n            label='TVL in dApps'\n            value={stakedTotal}\n          />\n        </Card.Content>\n        <Card.Content extra>\n\n         upcoming rewards\n         <Icon name='hand point right outline' />\n         {rewards}\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n\nexport default function EraStaked (props) {\n  const { api } = useSubstrate();\n  return api.query.dappsStaking\n    ? <Main {...props} />\n    : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Statistic, Grid, Card, Icon, Progress } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main(props) {\n  const { api } = useSubstrate();\n  const [era, setCurrentEra] = useState(0);\n  const [blockCountdown, setBlockCountdown] = useState(0);\n  const [progress, setProgress] = useState(0);\n\n  const blockPerEra = api.consts.dappsStaking.blockPerEra.toNumber();\n  const currentEra = api.query.dappsStaking.currentEra;\n  const bestNumber = api.derive.chain.bestNumber;\n\n  useEffect(() => {\n    let unsubscribeAll = null;\n\n    bestNumber(number => {\n      setProgress((number % blockPerEra) / blockPerEra);\n      setBlockCountdown(blockPerEra - (number % blockPerEra));\n    })\n      .then(unsub => {\n        unsubscribeAll = unsub;\n      })\n      .catch(console.error);\n\n    api.query.dappsStaking.currentEra(e => {\n      setCurrentEra(e.toNumber());\n    }).catch(console.error);\n\n\n    return () => unsubscribeAll && unsubscribeAll();\n  }, [currentEra, bestNumber]);\n\n  return (\n    <Grid.Column>\n      <Card color='purple'>\n        <Card.Content textAlign='center'>\n          <Statistic\n            label='Current Era'\n            value={era}\n          />\n        </Card.Content>\n        <Card.Content extra>\n          <Progress percent={progress} indicating success/>\n          Blocks until new era :\n          <Icon name='time' /> {blockCountdown}\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n\nexport default function CurrentEra(props) {\n  const { api } = useSubstrate();\n  return api.query.dappsStaking.currentEra\n    ? <Main {...props} />\n    : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Grid, Form, Dropdown, Input, Label } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\nimport { TxButton, TxGroupButton } from './substrate-lib/components';\n\nconst argIsOptional = (arg) =>\n  arg.type.toString().startsWith('Option<');\n\nfunction Main (props) {\n  const { api, jsonrpc } = useSubstrate();\n  const { accountPair } = props;\n  const [status, setStatus] = useState(null);\n\n  const [interxType, setInterxType] = useState('QUERY');\n  const [palletRPCs, setPalletRPCs] = useState([{key: 'dappsStaking', value: 'dappsStaking', text: 'dappsStaking'}]);\n  const [callables, setCallables] = useState([]);\n  const [paramFields, setParamFields] = useState([]);\n\n  const initFormState = {\n    palletRpc: '',\n    callable: '',\n    inputParams: []\n  };\n\n  const [formState, setFormState] = useState(initFormState);\n  const { palletRpc, callable, inputParams } = formState;\n\n  const getApiType = (api, interxType) => {\n    if (interxType === 'QUERY') {\n      return api.query;\n    } else if (interxType === 'EXTRINSIC') {\n      return api.tx;\n    } else if (interxType === 'RPC') {\n      return api.rpc;\n    } else {\n      return api.consts;\n    }\n  };\n  \n  const updateCallables = () => {\n    if (!api || palletRpc === '') { return; }\n    const callables = Object.keys(getApiType(api, interxType)[palletRpc]).sort()\n    .map(c => ({ key: c, value: c, text: c }));\n    console.log(\"updateCallables\", callables);\n    setCallables(callables);\n  };\n\n  const updateParamFields = () => {\n    if (!api || palletRpc === '' || callable === '') {\n      setParamFields([]);\n      return;\n    }\n\n    let paramFields = [];\n\n    if (interxType === 'QUERY') {\n      console.log('interxType QUERY');\n\n      const metaType = api.query[palletRpc][callable].meta.type;\n      console.log('metaType = ', metaType);\n      if (metaType.isPlain) {\n        // Do nothing as `paramFields` is already set to []\n      } else if (metaType.isMap) {\n        console.log('metaType isMap');\n        paramFields = [{\n          name: metaType.asMap.key.toString(),\n          type: metaType.asMap.key.toString(),\n          optional: false\n        }];\n        console.log('paramFields = ', paramFields);\n      } else if (metaType.isDoubleMap) {\n        console.log('metaType isDoubleMap');\n        paramFields = [{\n          name: metaType.asDoubleMap.key1.toString(),\n          type: metaType.asDoubleMap.key1.toString(),\n          optional: false\n        }, {\n          name: metaType.asDoubleMap.key2.toString(),\n          type: metaType.asDoubleMap.key2.toString(),\n          optional: false\n        }];\n        console.log('paramFields = ', paramFields);\n      }\n    } else if (interxType === 'EXTRINSIC') {\n      console.log('interxType EXTRINSIC');\n\n      const metaArgs = api.tx[palletRpc][callable].meta.args;\n\n      if (metaArgs && metaArgs.length > 0) {\n        paramFields = metaArgs.map(arg => ({\n          name: arg.name.toString(),\n          type: arg.type.toString(),\n          optional: argIsOptional(arg)\n        }));\n      }\n    } else if (interxType === 'RPC') {\n      let metaParam = [];\n\n      if (jsonrpc[palletRpc] && jsonrpc[palletRpc][callable]) {\n        metaParam = jsonrpc[palletRpc][callable].params;\n      }\n\n      if (metaParam.length > 0) {\n        paramFields = metaParam.map(arg => ({\n          name: arg.name,\n          type: arg.type,\n          optional: arg.isOptional || false\n        }));\n      }\n    } else if (interxType === 'CONSTANT') {\n      paramFields = [];\n    }\n\n    setParamFields(paramFields);\n  };\n\n  useEffect(updateCallables, [api, interxType, palletRpc]);\n  useEffect(updateParamFields, [api, interxType, palletRpc, callable, jsonrpc]);\n\n  const onPalletCallableParamChange = (_, data) => {\n    setFormState(formState => {\n      let res;\n      const { state, value } = data;\n      if (typeof state === 'object') {\n        // Input parameter updated\n        const { ind, paramField: { type } } = state;\n        const inputParams = [...formState.inputParams];\n        inputParams[ind] = { type, value };\n        res = { ...formState, inputParams };\n      } else if (state === 'palletRpc') {\n        res = { ...formState, [state]: value, callable: '', inputParams: [] };\n      } else if (state === 'callable') {\n        res = { ...formState, [state]: value, inputParams: [] };\n      }\n      return res;\n    });\n  };\n\n  const onInterxTypeChange = (ev, data) => {\n    setInterxType(data.value);\n    // clear the formState\n    setFormState(initFormState);\n  };\n\n  const getOptionalMsg = (interxType) =>\n    interxType === 'RPC'\n      ? 'Optional Parameter'\n      : 'Leaving this field as blank will submit a NONE value';\n\n  return (\n    <Grid.Column width={8}>\n      <h1>dApps-Staking Pallet Interactor</h1>\n      <Form>\n        <Form.Group style={{ overflowX: 'auto' }} inline>\n          <label>Interaction Type</label>\n          <Form.Radio\n            label='Extrinsic'\n            name='interxType'\n            value='EXTRINSIC'\n            checked={interxType === 'EXTRINSIC'}\n            onChange={onInterxTypeChange}\n          />\n          <Form.Radio\n            label='Query'\n            name='interxType'\n            value='QUERY'\n            checked={interxType === 'QUERY'}\n            onChange={onInterxTypeChange}\n          />\n          <Form.Radio\n            label='RPC'\n            name='interxType'\n            value='RPC'\n            checked={interxType === 'RPC'}\n            onChange={onInterxTypeChange}\n          />\n          <Form.Radio\n            label='Constant'\n            name='interxType'\n            value='CONSTANT'\n            checked={interxType === 'CONSTANT'}\n            onChange={onInterxTypeChange}\n          />\n        </Form.Group>\n        <Form.Field>\n          <Dropdown\n            placeholder='Pallets / RPC'\n            fluid\n            label='Pallet / RPC'\n            onChange={onPalletCallableParamChange}\n            search\n            selection\n            state='palletRpc'\n            value={palletRpc}\n            options={palletRPCs}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Dropdown\n            placeholder='Callables'\n            fluid\n            label='Callable'\n            onChange={onPalletCallableParamChange}\n            search\n            selection\n            state='callable'\n            value={callable}\n            options={callables}\n          />\n        </Form.Field>\n        {paramFields.map((paramField, ind) =>\n          <Form.Field key={`${paramField.name}-${paramField.type}`}>\n            <Input\n              placeholder={paramField.type}\n              fluid\n              type='text'\n              label={paramField.name}\n              state={{ ind, paramField }}\n              value={ inputParams[ind] ? inputParams[ind].value : '' }\n              onChange={onPalletCallableParamChange}\n            />\n            { paramField.optional\n              ? <Label\n                basic\n                pointing\n                color='teal'\n                content = { getOptionalMsg(interxType) }\n              />\n              : null\n            }\n          </Form.Field>\n        )}\n        <Form.Field style={{ textAlign: 'center' }}>\n          <InteractorSubmit\n            accountPair={accountPair}\n            setStatus={setStatus}\n            attrs={{ interxType, palletRpc, callable, inputParams, paramFields }}\n          />\n        </Form.Field>\n        <div style={{ overflowWrap: 'break-word' }}>{status}</div>\n      </Form>\n    </Grid.Column>\n  );\n}\n\nfunction InteractorSubmit (props) {\n  const { attrs: { interxType } } = props;\n  if (interxType === 'QUERY') {\n    console.log('TxButton InteractorSubmit props = ', props);\n\n    return <TxButton\n      label = 'Query'\n      type = 'QUERY'\n      color = 'blue'\n      {...props}\n    />;\n  } else if (interxType === 'EXTRINSIC') {\n    return <TxGroupButton {...props} />;\n  } else if (interxType === 'RPC' || interxType === 'CONSTANT') {\n    return <TxButton\n      label = 'Submit'\n      type = {interxType}\n      color = 'blue'\n      {...props}\n    />;\n  }\n}\n\nexport default function DSInteractor (props) {\n  const { api } = useSubstrate();\n  return api.tx ? <Main {...props} /> : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Statistic, Grid, Card } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const [dappsCount, setDappsCount] = useState(0);\n  const [preApproval, setPreApproval] = useState('unknown');\n\n  useEffect(() => {\n    let unsubscribe;\n    api.query.dappsStaking.preApprovalIsEnabled((result) => {\n      setPreApproval(result.toString());\n    });\n\n    unsubscribe = api.query.dappsStaking.registeredDapps.keys().then(\n      result => {\n        setDappsCount(result.length);\n      }\n    )\n      .catch(console.error);\n\n    return () => unsubscribe;\n  }, [api.query.dappsStaking, api.query.dappsStaking.registeredDapps]);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content textAlign='center'>\n          <Statistic\n            label='dApps Count'\n            value={dappsCount}\n          />\n        </Card.Content>\n        <Card.Content extra>\n          preappoval enabled: {preApproval}\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n\nexport default function DappsCount (props) {\n  const { api } = useSubstrate();\n  return api.query.dappsStaking &&\n    api.query.dappsStaking.registeredDapps\n    ? <Main {...props} />\n    : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Card, Icon, Grid } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main (props) {\n  const { api, socket } = useSubstrate();\n  const [nodeInfo, setNodeInfo] = useState({});\n\n  useEffect(() => {\n    const getInfo = async () => {\n      try {\n        const [chain, nodeName, nodeVersion] = await Promise.all([\n          api.rpc.system.chain(),\n          api.rpc.system.name(),\n          api.rpc.system.version()\n        ]);\n        setNodeInfo({ chain, nodeName, nodeVersion });\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    getInfo();\n  }, [api.rpc.system]);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content>\n          <Card.Header>{nodeInfo.nodeName}</Card.Header>\n          <Card.Meta>\n            <span>{nodeInfo.chain}</span>\n          </Card.Meta>\n          <Card.Description>{socket}</Card.Description>\n        </Card.Content>\n        <Card.Content extra>\n          <Icon name='setting' />v{nodeInfo.nodeVersion}\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n\nexport default function NodeInfo (props) {\n  const { api } = useSubstrate();\n  return api.rpc &&\n    api.rpc.system &&\n    api.rpc.system.chain &&\n    api.rpc.system.name &&\n    api.rpc.system.version\n    ? <Main {...props} />\n    : null;\n}\n","import React, { useState, useEffect } from 'react';\n\nimport {\n  Dropdown,\n  Container\n} from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main (props) {\n  const [networkSelected, setNetworkSelected] = useState('');\n\n  const networkOptions =\n    [\n      {\n        key: 'Shiden', text: 'Shiden (mainnet)', value: 'wss://rpc.shiden.astar.network'\n      },\n      {\n        key: 'Shibuya', text: 'Shibuya (testnet)', value: 'wss://rpc.shibuya.astar.network'\n      },\n      {\n        key: 'Local', text: 'Local', value: 'ws://127.0.0.1:9944'\n      }\n    ];\n\n  const initialNetwork =\n    networkOptions.length > 0 ? networkOptions[0].name : '';\n\n  // Set the initial address\n  useEffect(() => {\n    console.log('useEffect selected Network', networkSelected);\n  }, [networkSelected, initialNetwork]);\n\n  const onChange = network => {\n    setNetworkSelected(network);\n  };\n\n  return (\n    <Container>\n      <Dropdown\n        search\n        selection\n        clearable\n        placeholder='Select the Network'\n        options={networkOptions}\n        onChange={(_, dropdown) => {\n          onChange(dropdown.value);\n        }}\n        value={networkSelected}\n      />\n    </Container>\n  );\n}\n\nexport default function Network (props) {\n  const { api } = useSubstrate();\n  return api.query ? <Main {...props} /> : null;\n}\n","import React, { useState, createRef } from 'react';\nimport { Container, Dimmer, Loader, Grid, Sticky, Message, Segment, Rail, Image, Divider } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\n\nimport { SubstrateContextProvider, useSubstrate } from './substrate-lib';\nimport { DeveloperConsole } from './substrate-lib/components';\n\n// import NetworkSelector from './NetworkSelector';\nimport ContractExplorer from './ContractExplorer';\n// import Balances from './Balances';\nimport EraStaked from './EraStaked';\n// import BlockNumber from './BlockNumber';\nimport EraNumber from './EraNumber';\nimport Events from './Events';\nimport DSInteractor from './DSInteractor';\nimport DappsCount from './DappsCount';\n// import Metadata from './Metadata';\nimport NodeInfo from './NodeInfo';\nimport TemplateModule from './TemplateModule';\nimport Network from './Network';\n// import Transfer from './Transfer';\n// import Upgrade from './Upgrade';\n\nfunction Main() {\n  const [accountAddress, setAccountAddress] = useState(null);\n  const { apiState, keyring, keyringState, apiError } = useSubstrate();\n  const accountPair =\n    accountAddress &&\n    keyringState === 'READY' &&\n    keyring.getPair(accountAddress);\n\n  const loader = text =>\n    <Dimmer active>\n      <Loader size='small'>{text}</Loader>\n    </Dimmer>;\n\n  const message = err =>\n    <Grid centered columns={2} padded>\n      <Grid.Column>\n        <Message negative compact floating\n          header='Error Connecting to Substrate'\n          content={`${JSON.stringify(err, null, 4)}`}\n        />\n      </Grid.Column>\n    </Grid>;\n\n  if (apiState === 'ERROR') return message(apiError);\n  else if (apiState !== 'READY') return loader('Connecting to Substrate');\n\n  if (keyringState !== 'READY') {\n    return loader('Loading accounts (please review any extension\\'s authorization)');\n  }\n\n  const contextRef = createRef();\n\n  return (\n    <div ref={contextRef}>\n      <Sticky context={contextRef}>\n        <Grid centered columns={2}>\n\n        </Grid>\n      </Sticky>\n      <Divider />\n      <Container>\n        <style>\n          {`\n            html, body {\n              background-color: #252839 !important;\n            }\n            p {\n              align-content: center;\n              background-color: #495285;\n              color: #fff;\n              display: flex;\n              flex-direction: column;\n              justify-content: center;\n              min-height: 6em;\n            }\n            p > span {\n              opacity: 0.4;\n              text-align: center;\n            }\n          }\n          `}\n        </style>\n        <Grid stackable columns='equal'>\n        <Grid.Row>\n            <Image src={`${process.env.PUBLIC_URL}/assets/astar_dashboard.png`} size='huge' />\n            <Network />\n          </Grid.Row>\n          <Grid.Row stretched>\n            <EraNumber />\n            <DappsCount />\n            <EraStaked />\n            <NodeInfo />\n          </Grid.Row>\n          <Divider />\n          {/* <Grid.Row stretched>\n            <Balances />\n          </Grid.Row> */}\n          {/* <Grid.Row>\n            <Transfer accountPair={accountPair} />\n            <Upgrade accountPair={accountPair} />\n          </Grid.Row> */}\n          <Grid.Row>\n            <Segment raised>\n              <ContractExplorer />\n            </Segment>\n          </Grid.Row>\n          <Divider />\n          <Grid.Row>\n            <Segment raised>\n              <DSInteractor accountPair={accountPair} />\n            </Segment>\n          </Grid.Row>\n        </Grid>\n      </Container>\n      <DeveloperConsole />\n    </div>\n  );\n}\n\nexport default function App() {\n  return (\n    <SubstrateContextProvider>\n      <Main />\n    </SubstrateContextProvider>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}