{"version":3,"sources":["config/index.js","substrate-lib/SubstrateContext.js","substrate-lib/utils.js","substrate-lib/components/TxButton.js","substrate-lib/components/DeveloperConsole.js","ContractExplorer.js","EraStaked.js","EraNumber.js","DSInteractor.js","DappsCount.js","NodeInfo.js","Constants.js","Network.js","App.js","index.js"],"names":["configEnv","require","types","envVars","reduce","mem","n","undefined","process","slice","config","configCommon","connectedSocket","queryString","parse","window","location","search","rpc","PROVIDER_SOCKET","console","log","INIT_STATE","socket","jsonrpc","RPC","keyring","keyringState","api","apiError","apiState","reducer","state","action","type","payload","Error","loadAccts","SubstrateContext","React","createContext","SubstrateContextProvider","props","initState","forEach","key","useReducer","dispatch","provider","WsProvider","_api","ApiPromise","on","isReady","then","err","connect","asyncLoadAccounts","a","web3Enable","APP_NAME","web3Accounts","allAccounts","map","address","meta","name","source","loadAll","isDevelopment","DEVELOPMENT_KEYRING","error","loadAccounts","Provider","value","children","useSubstrate","useContext","utils","paramConversion","num","TxButton","accountPair","label","setStatus","color","style","attrs","disabled","useState","unsub","setUnsub","sudoKey","setSudoKey","palletRpc","callable","inputParams","paramFields","isSudo","isUncheckedSudo","useEffect","query","sudo","isEmpty","toString","acctPair","getFromAcct","isInjected","web3FromSource","injected","fromAcct","setSigner","signer","txResHandler","status","isFinalized","asFinalized","txErrHandler","sudoTx","transformed","transformParams","txExecute","tx","signAndSend","catch","uncheckedSudoTx","sudoUncheckedWeight","signedTx","unsignedTx","send","queryResHandler","result","isNone","emptyAsNull","constant","consts","transaction","opts","paramVal","inputParam","trim","params","field","ind","memo","converted","indexOf","split","e","single","isNumType","Number","parseFloat","parseInt","some","el","Button","basic","onClick","length","every","paramField","param","optional","TxGroupButton","Group","Or","DeveloperConsole","util","utilCrypto","DECIMALS","Main","contracts","setContracts","selectedContract","setSelectedContract","oldestToClaim","setOldestToClaim","lastStaked","setLastStaked","formState","setFormState","developer","setDeveloper","totalStaked","setTotalStaked","claimedRewards","setClaimedRewards","numStakers","setNumStakers","erasToClaim","setErasToClaim","firstTime","setFirstTimeStaked","getAddressEnum","Evm","fetchContracts","dappsStaking","registeredDapps","keys","r","c","contractList","text","queryDeveloper","res","unwrap","toHuman","getInfo","eraStakeMap","Map","contractEraStake","entries","eraMap","points","eraKey","args","k","set","toJSON","size","Math","max","entry","get","stakerNum","Object","stakers","total","rewards","claimed_rewards","currentEra","historyDepth","firstStakedEra","min","oldest","era","mapEntry","claimed","Grid","Column","width","Form","Field","Dropdown","placeholder","fluid","onChange","_","data","selection","options","DisplayTable","contract","overflowWrap","alt","src","Table","Header","Row","HeaderCell","Cell","as","Content","Subheader","Body","Icon","ContractExplorer","stakedTotal","setStakedTotal","setRewards","updateData","eraRewardsAndStakes","tvl","staked","valueOf","blockRewardAccumulator","acc","reward","Card","textAlign","Statistic","extra","EraStaked","setCurrentEra","blockCountdown","setBlockCountdown","progress","setProgress","getData","toNumber","blockPerEra","derive","chain","bestNumber","Progress","percent","indicating","success","EraNumber","argIsOptional","arg","startsWith","interxType","setInterxType","palletRPCs","callables","setCallables","setParamFields","initFormState","getApiType","sort","metaType","isPlain","isMap","asMap","isDoubleMap","asDoubleMap","key1","key2","metaArgs","metaParam","isOptional","onPalletCallableParamChange","onInterxTypeChange","ev","getOptionalMsg","overflowX","inline","Radio","checked","Input","Label","pointing","content","InteractorSubmit","DSInteractor","dappsCount","setDappsCount","fillup","setFillup","calcProgress","maxNumberOfStakersPerContract","maxStakers","calcNumStakers","staking_info","s","queryRegisteredDapps","warning","DappsCount","nodeInfo","setNodeInfo","Promise","all","system","version","nodeName","nodeVersion","Meta","Description","NodeInfo","blocksPerEra","setBlocksPerEra","setMaxStakers","setHistoryDepth","minStaking","setMinStaking","depth","stakingAmount","minimumStakingAmount","Step","active","Title","Constants","networkSelected","setNetworkSelected","parsedQuery","parseUrl","Container","clearable","dropdown","network","stringifyUrl","Network","accountAddress","getPair","loader","Dimmer","Loader","centered","columns","padded","Message","negative","compact","floating","header","JSON","stringify","contextRef","createRef","ref","Sticky","context","Divider","stackable","Image","stretched","Segment","raised","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a8568903.chunk.js","sourcesContent":["import configCommon from './common.json';\n// Using `require` as `import` does not support dynamic loading (yet).\nconst configEnv = require(`./${process.env.NODE_ENV}.json`);\nconst types = require('./types.json');\n\n// Accepting React env vars and aggregating them into `config` object.\nconst envVarNames = [\n  'REACT_APP_PROVIDER_SOCKET',\n  'REACT_APP_DEVELOPMENT_KEYRING'\n];\nconst envVars = envVarNames.reduce((mem, n) => {\n  // Remove the `REACT_APP_` prefix\n  if (process.env[n] !== undefined) mem[n.slice(10)] = process.env[n];\n  return mem;\n}, {});\n\nconst config = { ...configCommon, ...configEnv, ...envVars, types };\nexport default config;\n","import React, { useReducer, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport jsonrpc from '@polkadot/types/interfaces/jsonrpc';\nimport queryString from 'query-string';\n\nimport { ApiPromise, WsProvider } from '@polkadot/api';\nimport { web3Accounts, web3Enable } from '@polkadot/extension-dapp';\nimport keyring from '@polkadot/ui-keyring';\n\nimport config from '../config';\n\nconst parsedQuery = queryString.parse(window.location.search);\nconst connectedSocket = parsedQuery.rpc || config.PROVIDER_SOCKET;\nconsole.log(`Connected socket: ${connectedSocket}`);\n\n///\n// Initial state for `useReducer`\n\nconst INIT_STATE = {\n  socket: connectedSocket,\n  jsonrpc: { ...jsonrpc, ...config.RPC },\n  types: config.types,\n  keyring: null,\n  keyringState: null,\n  api: null,\n  apiError: null,\n  apiState: null\n};\n\n///\n// Reducer function for `useReducer`\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'CONNECT_INIT':\n      return { ...state, apiState: 'CONNECT_INIT' };\n\n    case 'CONNECT':\n      return { ...state, api: action.payload, apiState: 'CONNECTING' };\n\n    case 'CONNECT_SUCCESS':\n      return { ...state, apiState: 'READY' };\n\n    case 'CONNECT_ERROR':\n      return { ...state, apiState: 'ERROR', apiError: action.payload };\n\n    case 'LOAD_KEYRING':\n      return { ...state, keyringState: 'LOADING' };\n\n    case 'SET_KEYRING':\n      return { ...state, keyring: action.payload, keyringState: 'READY' };\n\n    case 'KEYRING_ERROR':\n      return { ...state, keyring: null, keyringState: 'ERROR' };\n\n    default:\n      throw new Error(`Unknown type: ${action.type}`);\n  }\n};\n\n///\n// Connecting to the Substrate node\n\nconst connect = (state, dispatch) => {\n  const { apiState, socket, jsonrpc, types } = state;\n  // We only want this function to be performed once\n  if (apiState) return;\n\n  dispatch({ type: 'CONNECT_INIT' });\n\n  const provider = new WsProvider(socket);\n  const _api = new ApiPromise({ provider, types, rpc: jsonrpc });\n\n  // Set listeners for disconnection and reconnection event.\n  _api.on('connected', () => {\n    dispatch({ type: 'CONNECT', payload: _api });\n    // `ready` event is not emitted upon reconnection and is checked explicitly here.\n    _api.isReady.then((_api) => dispatch({ type: 'CONNECT_SUCCESS' }));\n  });\n  _api.on('ready', () => dispatch({ type: 'CONNECT_SUCCESS' }));\n  _api.on('error', err => dispatch({ type: 'CONNECT_ERROR', payload: err }));\n};\n\n///\n// Loading accounts from dev and polkadot-js extension\n\nlet loadAccts = false;\nconst loadAccounts = (state, dispatch) => {\n  const asyncLoadAccounts = async () => {\n    dispatch({ type: 'LOAD_KEYRING' });\n    try {\n      await web3Enable(config.APP_NAME);\n      let allAccounts = await web3Accounts();\n      allAccounts = allAccounts.map(({ address, meta }) =>\n        ({ address, meta: { ...meta, name: `${meta.name} (${meta.source})` } }));\n      keyring.loadAll({ isDevelopment: config.DEVELOPMENT_KEYRING }, allAccounts);\n      dispatch({ type: 'SET_KEYRING', payload: keyring });\n    } catch (e) {\n      console.error(e);\n      dispatch({ type: 'KEYRING_ERROR' });\n    }\n  };\n\n  const { keyringState } = state;\n  // If `keyringState` is not null `asyncLoadAccounts` is running.\n  if (keyringState) return;\n  // If `loadAccts` is true, the `asyncLoadAccounts` has been run once.\n  if (loadAccts) return dispatch({ type: 'SET_KEYRING', payload: keyring });\n\n  // This is the heavy duty work\n  loadAccts = true;\n  asyncLoadAccounts();\n};\n\nconst SubstrateContext = React.createContext();\n\nconst SubstrateContextProvider = (props) => {\n  // filtering props and merge with default param value\n  const initState = { ...INIT_STATE };\n  const neededPropNames = ['socket', 'types'];\n  neededPropNames.forEach(key => {\n    initState[key] = (typeof props[key] === 'undefined' ? initState[key] : props[key]);\n  });\n\n  const [state, dispatch] = useReducer(reducer, initState);\n  connect(state, dispatch);\n  loadAccounts(state, dispatch);\n\n  return <SubstrateContext.Provider value={state}>\n    {props.children}\n  </SubstrateContext.Provider>;\n};\n\n// prop typechecking\nSubstrateContextProvider.propTypes = {\n  socket: PropTypes.string,\n  types: PropTypes.object\n};\n\nconst useSubstrate = () => ({ ...useContext(SubstrateContext) });\n\nexport { SubstrateContextProvider, useSubstrate };\n","const utils = {\n  paramConversion: {\n    num: [\n      'Compact<Balance>',\n      'BalanceOf',\n      'u8', 'u16', 'u32', 'u64', 'u128',\n      'i8', 'i16', 'i32', 'i64', 'i128'\n    ]\n  }\n};\n\nexport default utils;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from 'semantic-ui-react';\nimport { web3FromSource } from '@polkadot/extension-dapp';\n\nimport { useSubstrate } from '../';\nimport utils from '../utils';\n\nfunction TxButton ({\n  accountPair = null,\n  label,\n  setStatus,\n  color = 'blue',\n  style = null,\n  type = 'QUERY',\n  attrs = null,\n  disabled = false\n}) {\n  // Hooks\n  const { api } = useSubstrate();\n  const [unsub, setUnsub] = useState(null);\n  const [sudoKey, setSudoKey] = useState(null);\n\n  const { palletRpc, callable, inputParams, paramFields } = attrs;\n\n  const isQuery = () => type === 'QUERY';\n  const isSudo = () => type === 'SUDO-TX';\n  const isUncheckedSudo = () => type === 'UNCHECKED-SUDO-TX';\n  const isUnsigned = () => type === 'UNSIGNED-TX';\n  const isSigned = () => type === 'SIGNED-TX';\n  const isRpc = () => type === 'RPC';\n  const isConstant = () => type === 'CONSTANT';\n\n  const loadSudoKey = () => {\n    (async function () {\n      if (!api || !api.query.sudo) { return; }\n      const sudoKey = await api.query.sudo.key();\n      sudoKey.isEmpty ? setSudoKey(null) : setSudoKey(sudoKey.toString());\n    })();\n  };\n\n  useEffect(loadSudoKey, [api]);\n\n  const getFromAcct = async () => {\n    const {\n      address,\n      meta: { source, isInjected }\n    } = accountPair;\n    let fromAcct;\n\n    // signer is from Polkadot-js browser extension\n    if (isInjected) {\n      const injected = await web3FromSource(source);\n      fromAcct = address;\n      api.setSigner(injected.signer);\n    } else {\n      fromAcct = accountPair;\n    }\n\n    return fromAcct;\n  };\n\n  const txResHandler = ({ status }) =>\n    status.isFinalized\n      ? setStatus(`😉 Finalized. Block hash: ${status.asFinalized.toString()}`)\n      : setStatus(`Current transaction status: ${status.type}`);\n\n  const txErrHandler = err =>\n    setStatus(`😞 Transaction Failed: ${err.toString()}`);\n\n  const sudoTx = async () => {\n    const fromAcct = await getFromAcct();\n    const transformed = transformParams(paramFields, inputParams);\n    // transformed can be empty parameters\n    const txExecute = transformed\n      ? api.tx.sudo.sudo(api.tx[palletRpc][callable](...transformed))\n      : api.tx.sudo.sudo(api.tx[palletRpc][callable]());\n\n    const unsub = txExecute.signAndSend(fromAcct, txResHandler)\n      .catch(txErrHandler);\n    setUnsub(() => unsub);\n  };\n\n  const uncheckedSudoTx = async () => {\n    const fromAcct = await getFromAcct();\n    const txExecute =\n        api.tx.sudo.sudoUncheckedWeight(api.tx[palletRpc][callable](...inputParams), 0);\n\n    const unsub = txExecute.signAndSend(fromAcct, txResHandler)\n      .catch(txErrHandler);\n    setUnsub(() => unsub);\n  };\n\n  const signedTx = async () => {\n    const fromAcct = await getFromAcct();\n    const transformed = transformParams(paramFields, inputParams);\n    // transformed can be empty parameters\n\n    const txExecute = transformed\n      ? api.tx[palletRpc][callable](...transformed)\n      : api.tx[palletRpc][callable]();\n\n    const unsub = await txExecute.signAndSend(fromAcct, txResHandler)\n      .catch(txErrHandler);\n    setUnsub(() => unsub);\n  };\n\n  const unsignedTx = async () => {\n    const transformed = transformParams(paramFields, inputParams);\n    // transformed can be empty parameters\n    const txExecute = transformed\n      ? api.tx[palletRpc][callable](...transformed)\n      : api.tx[palletRpc][callable]();\n\n    const unsub = await txExecute.send(txResHandler)\n      .catch(txErrHandler);\n    setUnsub(() => unsub);\n  };\n\n  const queryResHandler = result =>\n    result.isNone ? setStatus('None') : setStatus(result.toString());\n\n  const query = async () => {\n    const transformed = transformParams(paramFields, inputParams);\n    const unsub = await api.query[palletRpc][callable](...transformed, queryResHandler);\n    setUnsub(() => unsub);\n  };\n\n  const rpc = async () => {\n    const transformed = transformParams(paramFields, inputParams, { emptyAsNull: false });\n    const unsub = await api.rpc[palletRpc][callable](...transformed, queryResHandler);\n    setUnsub(() => unsub);\n  };\n\n  const constant = () => {\n    const result = api.consts[palletRpc][callable];\n    result.isNone ? setStatus('None') : setStatus(result.toString());\n  };\n\n  const transaction = async () => {\n    if (unsub) {\n      unsub();\n      setUnsub(null);\n    }\n\n    setStatus('Sending...');\n\n    (isSudo() && sudoTx()) ||\n    (isUncheckedSudo() && uncheckedSudoTx()) ||\n    (isSigned() && signedTx()) ||\n    (isUnsigned() && unsignedTx()) ||\n    (isQuery() && query()) ||\n    (isRpc() && rpc()) ||\n    (isConstant() && constant());\n  };\n\n  const transformParams = (paramFields, inputParams, opts = { emptyAsNull: true }) => {\n    // if `opts.emptyAsNull` is true, empty param value will be added to res as `null`.\n    //   Otherwise, it will not be added\n    const paramVal = inputParams.map(inputParam => {\n      // To cater the js quirk that `null` is a type of `object`.\n      if (typeof inputParam === 'object' && inputParam !== null && typeof inputParam.value === 'string') {\n        return inputParam.value.trim();\n      } else if (typeof inputParam === 'string') {\n        return inputParam.trim();\n      }\n      return inputParam;\n    });\n    const params = paramFields.map((field, ind) => ({ ...field, value: paramVal[ind] || null }));\n\n    return params.reduce((memo, { type = 'string', value }) => {\n      if (value == null || value === '') return (opts.emptyAsNull ? [...memo, null] : memo);\n\n      let converted = value;\n\n      // Deal with a vector\n      if (type.indexOf('Vec<') >= 0) {\n        converted = converted.split(',').map(e => e.trim());\n        converted = converted.map(single => isNumType(type)\n          ? (single.indexOf('.') >= 0 ? Number.parseFloat(single) : Number.parseInt(single))\n          : single\n        );\n        return [...memo, converted];\n      }\n\n      // Deal with a single value\n      if (isNumType(type)) {\n        converted = converted.indexOf('.') >= 0 ? Number.parseFloat(converted) : Number.parseInt(converted);\n      }\n      return [...memo, converted];\n    }, []);\n  };\n\n  const isNumType = type =>\n    utils.paramConversion.num.some(el => type.indexOf(el) >= 0);\n\n  const allParamsFilled = () => {\n    if (paramFields.length === 0) { return true; }\n\n    return paramFields.every((paramField, ind) => {\n      const param = inputParams[ind];\n      if (paramField.optional) { return true; }\n      if (param == null) { return false; }\n\n      const value = typeof param === 'object' ? param.value : param;\n      return value !== null && value !== '';\n    });\n  };\n\n  const isSudoer = acctPair => {\n    if (!sudoKey || !acctPair) { return false; }\n    return acctPair.address === sudoKey;\n  };\n\n  return (\n    <Button\n      basic\n      color={color}\n      style={style}\n      type='submit'\n      onClick={transaction}\n      disabled={ disabled || !palletRpc || !callable || !allParamsFilled() ||\n        ((isSudo() || isUncheckedSudo()) && !isSudoer(accountPair)) }\n    >\n      {label}\n    </Button>\n  );\n}\n\n// prop type checking\nTxButton.propTypes = {\n  accountPair: PropTypes.object,\n  setStatus: PropTypes.func.isRequired,\n  type: PropTypes.oneOf([\n    'QUERY', 'RPC', 'SIGNED-TX', 'UNSIGNED-TX', 'SUDO-TX', 'UNCHECKED-SUDO-TX',\n    'CONSTANT']).isRequired,\n  attrs: PropTypes.shape({\n    palletRpc: PropTypes.string,\n    callable: PropTypes.string,\n    inputParams: PropTypes.array,\n    paramFields: PropTypes.array\n  }).isRequired\n};\n\nfunction TxGroupButton (props) {\n  return (\n    <Button.Group>\n      <TxButton\n        label='Unsigned'\n        type='UNSIGNED-TX'\n        color='grey'\n        {...props}\n      />\n      <Button.Or />\n      <TxButton\n        label='Signed'\n        type='SIGNED-TX'\n        color='blue'\n        {...props}\n      />\n      <Button.Or />\n      <TxButton\n        label='SUDO'\n        type='SUDO-TX'\n        color='red'\n        {...props}\n      />\n    </Button.Group>\n  );\n}\n\nexport { TxButton, TxGroupButton };\n","// This component will simply add utility functions to your developer console.\nimport { useSubstrate } from '../';\n\nexport default function DeveloperConsole (props) {\n  const { api, apiState, keyring, keyringState } = useSubstrate();\n  if (apiState === 'READY') { window.api = api; }\n  if (keyringState === 'READY') { window.keyring = keyring; }\n  window.util = require('@polkadot/util');\n  window.utilCrypto = require('@polkadot/util-crypto');\n\n  return null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Grid, Form, Dropdown, Table, Header, Icon } from 'semantic-ui-react';\nimport { useSubstrate } from './substrate-lib';\nconst DECIMALS = 1_000_000_000_000_000_000;\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const [contracts, setContracts] = useState([]);\n  const [selectedContract, setSelectedContract] = useState(0);\n  const [oldestToClaim, setOldestToClaim] = useState(0);\n  const [lastStaked, setLastStaked] = useState(0);\n  const [formState, setFormState] = useState(0);\n  const [developer, setDeveloper] = useState(0);\n  const [totalStaked, setTotalStaked] = useState(0);\n  const [claimedRewards, setClaimedRewards] = useState(0);\n  const [numStakers, setNumStakers] = useState(0);\n  const [erasToClaim, setErasToClaim] = useState(0);\n  const [firstTime, setFirstTimeStaked] = useState(0);\n\n  const getAddressEnum = (address) => (\n    { Evm: address }\n  );\n\n  const resetContractInfo = () => {\n    setDeveloper(0);\n    setLastStaked(0);\n    setOldestToClaim(0);\n    setNumStakers('?');\n    setTotalStaked(0);\n    setClaimedRewards('?');\n    setErasToClaim(0);\n  };\n\n  const onContractChange = (_, data) => {\n    resetContractInfo();\n    console.log('onContractChange value', data.value);\n    setSelectedContract(data.value);\n    setFormState(data.value);\n  };\n\n  const queryEraStakeMap = () => {\n    const getInfo = async () => {\n      const eraStakeMap = new Map();\n\n      try {\n        const eraMap = await api.query.dappsStaking.contractEraStake.entries(\n          getAddressEnum(selectedContract)\n        );\n        console.log('contractEraStake.entries ', eraMap);\n        eraMap.forEach(([key, points]) => {\n          // console.log('[key, points] = ', key, points);\n          const eraKey = parseInt(key.args.map((k) => k.toString())[1]);\n          // console.log('eraKey', eraKey);\n          eraStakeMap.set(eraKey, points.toJSON());\n        });\n\n        console.log('queryEraStakeMap eraStakeMap', eraStakeMap);\n        if (eraStakeMap.size !== 0) {\n          // contract last staked\n          const lastStaked = Math.max(...eraStakeMap.keys());\n          console.log('queryEraStakeMap lastStaked', lastStaked);\n          setLastStaked(lastStaked);\n\n          // number of stakers\n          const entry = eraStakeMap.get(lastStaked);\n          const stakerNum = Object.keys(entry.stakers).length;\n          console.log('queryEraStakeMap stakerNum', stakerNum);\n          setNumStakers(stakerNum);\n\n          // total staked on the contract\n          const total = parseInt(entry.total / DECIMALS);\n          console.log('queryEraStakeMap total', total);\n          setTotalStaked(total);\n\n          // last claimed amount of rewards on the contract\n          const rewards = parseInt(entry.claimed_rewards / DECIMALS);\n          console.log('queryEraStakeMap last claimed_rewards', rewards);\n          // oldest era to Claim\n          api.query.dappsStaking.currentEra(currentEra => {\n            const historyDepth = parseInt(api.consts.dappsStaking.historyDepth.toString());\n            let firstStakedEra = Math.min(...eraStakeMap.keys());\n            setClaimedRewards(0);\n            setFirstTimeStaked(firstStakedEra);\n            firstStakedEra = Math.max(firstStakedEra, Math.max(1, currentEra - historyDepth));\n            let oldest = firstStakedEra;\n            // find era when it was last claimed\n            for (let era = firstStakedEra; era <= currentEra; era++) {\n              const mapEntry = eraStakeMap.get(era);\n              if (typeof (mapEntry) !== 'undefined') {\n                const claimed = parseInt(mapEntry.claimed_rewards / DECIMALS);\n                setClaimedRewards(r => r + claimed);\n                // console.log('claimedRewards = ', era, claimed);\n                if (claimed === 0) {\n                  oldest = era - 1;\n                  // console.log('oldest  0 = ', era);\n                  break;\n                }\n              } else { // map entry can be undefined if there were no staking in last era\n                oldest = era - 1;\n                // console.log('oldest = ', era);\n              }\n            }\n            setOldestToClaim(oldest);\n            setErasToClaim(currentEra - oldest - 1);\n          }).catch(console.error);\n        }\n      } catch (err) {\n        console.error(err);\n        console.log('queryEraStakeMap failed');\n      }\n    };\n    getInfo();\n  };\n\n  useEffect(() => {\n    const fetchContracts = async () => {\n      try {\n        const result = await api.query.dappsStaking.registeredDapps.keys();\n        console.log('registeredDapps result', result);\n        const r = result.map(c => '0x' + c.toString().slice(-40));\n        // console.log(r);\n        const contractList = r.map(c => ({ key: c, value: c, text: c }));\n        console.log('fetchContracts', contractList);\n        setContracts(contractList);\n      } catch (err) {\n        console.error(err);\n        console.log('fetchContracts registeredDapps.keys() failed');\n      }\n    };\n    fetchContracts();\n  }, [api.query.dappsStaking]);\n\n  useEffect(() => {\n    const queryDeveloper = async () => {\n      try {\n        const result = await api.query.dappsStaking.registeredDapps(getAddressEnum(selectedContract));\n        let res;\n        result.isNone ? res = 'none' : res = result.unwrap().toHuman();\n        console.log('contract=', selectedContract, 'setDeveloper to', res);\n        setDeveloper(res);\n      } catch (err) {\n        console.error(err);\n        console.log('queryEraStakeMap registeredDapps failed');\n      }\n    };\n    queryDeveloper();\n  }, [api.query.dappsStaking, selectedContract]);\n\n  useEffect(queryEraStakeMap, [api.query.dappsStaking, api.consts.dappsStaking.historyDepth, selectedContract]);\n\n  return (\n    <Grid.Column width={8}>\n      <h1>Contract Explorer</h1>\n      <Form>\n        <Form.Field>\n          <Dropdown\n            placeholder='Contract'\n            fluid\n            label='Contract'\n            onChange={onContractChange}\n            search\n            selection\n            value={formState}\n            options={contracts}\n          />\n        </Form.Field>\n        <DisplayTable\n          developer={developer}\n          numStakers={numStakers}\n          firstTime={firstTime}\n          oldestToClaim={oldestToClaim}\n          lastStaked={lastStaked}\n          totalStaked={totalStaked}\n          claimedRewards={claimedRewards}\n          contract={selectedContract}\n          erasToClaim={erasToClaim}\n        />\n      </Form>\n    </Grid.Column>\n\n  );\n}\n\nfunction DisplayTable (props) {\n  return <div style={{ overflowWrap: 'break-word' }}>\n    <img alt='robots' src={`https://robohash.org/${props.contract}`} />\n    <Table>\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell >Contract Address</Table.HeaderCell>\n          <Table.HeaderCell >{props.contract}</Table.HeaderCell>\n        </Table.Row>\n        <Table.Row>\n          <Table.HeaderCell >Developer's account:</Table.HeaderCell>\n          <Table.HeaderCell >{props.developer}</Table.HeaderCell>\n          <Table.Cell>\n            <Header as='h2'>\n              <Header.Content>\n                {props.firstTime}\n                <Header.Subheader>First Time Staked</Header.Subheader>\n              </Header.Content>\n            </Header>\n          </Table.Cell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        <Table.Row>\n          <Table.Cell>\n            <Header as='h2'>\n              <Header.Content>\n                {props.lastStaked}\n                <Header.Subheader>Contract Last Staked</Header.Subheader>\n              </Header.Content>\n            </Header>\n          </Table.Cell>\n          <Table.Cell >\n            <Header as='h2'>\n              <Header.Content>\n                {props.oldestToClaim}\n                <Header.Subheader>Last Era Claimed</Header.Subheader>\n              </Header.Content>\n            </Header>\n          </Table.Cell>\n          <Table.Cell>\n            <Header as='h2'>\n              <Header.Content>\n                <Icon name='user' />\n                {props.numStakers}\n                <Header.Subheader>Number of Stakers</Header.Subheader>\n              </Header.Content>\n            </Header>\n          </Table.Cell>\n        </Table.Row>\n        <Table.Row>\n          <Table.Cell>\n            <Header as='h2'>\n              <Header.Content>\n                {props.totalStaked}\n                <Header.Subheader>Total Staked</Header.Subheader>\n              </Header.Content>\n            </Header>\n          </Table.Cell>\n          <Table.Cell >\n            <Header as='h2'>\n              <Header.Content>\n                {props.claimedRewards}\n                <Header.Subheader>Claimed Rewards</Header.Subheader>\n              </Header.Content>\n            </Header>\n          </Table.Cell>\n          <Table.Cell>\n            <Header as='h2'>\n              <Header.Content>\n                {props.erasToClaim}\n                <Header.Subheader>Unclaimed eras</Header.Subheader>\n              </Header.Content>\n            </Header>\n          </Table.Cell>\n        </Table.Row>\n      </Table.Body>\n    </Table>\n  </div>;\n}\n\nexport default function ContractExplorer (props) {\n  const { api } = useSubstrate();\n  return api ? <Main {...props} /> : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Statistic, Grid, Card, Icon } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\nconst DECIMALS = '1000000000000000000';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  // const [era, setCurrentEra] = useState(0);\n  const [stakedTotal, setStakedTotal] = useState(0);\n  const [rewards, setRewards] = useState(0);\n\n  useEffect(() => {\n    const updateData = async () => {\n      try {\n        // read current era\n        const era = await api.query.dappsStaking.currentEra();\n\n        // read rewards and staked for current era\n        const result = await api.query.dappsStaking.eraRewardsAndStakes(era);\n\n        // extract staked amount (TVL)\n        const tvl = parseInt(result.unwrap().staked.valueOf() / DECIMALS);\n        console.log('TVL =', tvl);\n        setStakedTotal(tvl);\n\n        // read accumulated rewards in this era\n        const acc = await api.query.dappsStaking.blockRewardAccumulator();\n        const reward = parseInt(acc / DECIMALS);\n        setRewards(reward);\n      } catch (err) { console.error(err); }\n    };\n    updateData();\n  }, [api.query.dappsStaking, api.query.dappsStaking.blockRewardAccumulator]);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content textAlign='center'>\n          <Statistic\n            label='TVL in dApps'\n            value={stakedTotal}\n          />\n        </Card.Content>\n        <Card.Content extra>\n          upcoming rewards\n          <Icon name='hand point right outline' />\n          {rewards}\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n\nexport default function EraStaked (props) {\n  const { api } = useSubstrate();\n  return api.query.dappsStaking\n    ? <Main {...props} />\n    : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Statistic, Grid, Card, Icon, Progress } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const [era, setCurrentEra] = useState(0);\n  const [blockCountdown, setBlockCountdown] = useState(0);\n  const [progress, setProgress] = useState(0);\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        // set current era\n        const era = (await api.query.dappsStaking.currentEra()).toNumber();\n        setCurrentEra(era);\n\n        // set progress and block countdown\n        const blockPerEra = await api.consts.dappsStaking.blockPerEra.toNumber();\n        await api.derive.chain.bestNumber(bestNumber => {\n          setProgress((bestNumber % blockPerEra) / blockPerEra * 100);\n          setBlockCountdown(blockPerEra - (bestNumber % blockPerEra));\n        });\n      } catch (err) {\n        console.error(err);\n      }\n    };\n    getData();\n  }, [api.consts.dappsStaking.blockPerEra, api.query.dappsStaking, api.derive.chain]);\n\n  return (\n    <Grid.Column>\n      <Card color='purple'>\n        <Card.Content textAlign='center'>\n          <Statistic\n            label='Current Era'\n            value={era}\n          />\n        </Card.Content>\n        <Card.Content extra>\n          Blocks until new era :\n          <Icon name='time' /> {blockCountdown}\n          <Progress percent={progress} indicating success />\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n\nexport default function EraNumber (props) {\n  const { api } = useSubstrate();\n  return api.query.dappsStaking.currentEra\n    ? <Main {...props} />\n    : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Grid, Form, Dropdown, Input, Label } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\nimport { TxButton, TxGroupButton } from './substrate-lib/components';\n\nconst argIsOptional = (arg) =>\n  arg.type.toString().startsWith('Option<');\n\nfunction Main (props) {\n  const { api, jsonrpc } = useSubstrate();\n  const { accountPair } = props;\n  const [status, setStatus] = useState(null);\n\n  const [interxType, setInterxType] = useState('QUERY');\n  const [palletRPCs] = useState([{ key: 'dappsStaking', value: 'dappsStaking', text: 'dappsStaking' }]);\n  const [callables, setCallables] = useState([]);\n  const [paramFields, setParamFields] = useState([]);\n\n  const initFormState = {\n    palletRpc: '',\n    callable: '',\n    inputParams: []\n  };\n\n  const [formState, setFormState] = useState(initFormState);\n  const { palletRpc, callable, inputParams } = formState;\n\n  const getApiType = (api, interxType) => {\n    if (interxType === 'QUERY') {\n      return api.query;\n    } else if (interxType === 'EXTRINSIC') {\n      return api.tx;\n    } else if (interxType === 'RPC') {\n      return api.rpc;\n    } else {\n      return api.consts;\n    }\n  };\n\n  const updateCallables = () => {\n    if (!api || palletRpc === '') { return; }\n    const callables = Object.keys(getApiType(api, interxType)[palletRpc]).sort()\n      .map(c => ({ key: c, value: c, text: c }));\n    // console.log('updateCallables', callables);\n    setCallables(callables);\n  };\n\n  const updateParamFields = () => {\n    if (!api || palletRpc === '' || callable === '') {\n      setParamFields([]);\n      return;\n    }\n\n    let paramFields = [];\n\n    if (interxType === 'QUERY') {\n      // console.log('interxType QUERY');\n\n      const metaType = api.query[palletRpc][callable].meta.type;\n      // console.log('metaType = ', metaType);\n      if (metaType.isPlain) {\n        // Do nothing as `paramFields` is already set to []\n      } else if (metaType.isMap) {\n        // console.log('metaType isMap');\n        paramFields = [{\n          name: metaType.asMap.key.toString(),\n          type: metaType.asMap.key.toString(),\n          optional: false\n        }];\n        // console.log('paramFields = ', paramFields);\n      } else if (metaType.isDoubleMap) {\n        // console.log('metaType isDoubleMap');\n        paramFields = [{\n          name: metaType.asDoubleMap.key1.toString(),\n          type: metaType.asDoubleMap.key1.toString(),\n          optional: false\n        }, {\n          name: metaType.asDoubleMap.key2.toString(),\n          type: metaType.asDoubleMap.key2.toString(),\n          optional: false\n        }];\n        // console.log('paramFields = ', paramFields);\n      }\n    } else if (interxType === 'EXTRINSIC') {\n      // console.log('interxType EXTRINSIC');\n\n      const metaArgs = api.tx[palletRpc][callable].meta.args;\n\n      if (metaArgs && metaArgs.length > 0) {\n        paramFields = metaArgs.map(arg => ({\n          name: arg.name.toString(),\n          type: arg.type.toString(),\n          optional: argIsOptional(arg)\n        }));\n      }\n    } else if (interxType === 'RPC') {\n      let metaParam = [];\n\n      if (jsonrpc[palletRpc] && jsonrpc[palletRpc][callable]) {\n        metaParam = jsonrpc[palletRpc][callable].params;\n      }\n\n      if (metaParam.length > 0) {\n        paramFields = metaParam.map(arg => ({\n          name: arg.name,\n          type: arg.type,\n          optional: arg.isOptional || false\n        }));\n      }\n    } else if (interxType === 'CONSTANT') {\n      paramFields = [];\n    }\n\n    setParamFields(paramFields);\n  };\n\n  useEffect(updateCallables, [api, interxType, palletRpc]);\n  useEffect(updateParamFields, [api, interxType, palletRpc, callable, jsonrpc]);\n\n  const onPalletCallableParamChange = (_, data) => {\n    setFormState(formState => {\n      let res;\n      const { state, value } = data;\n      if (typeof state === 'object') {\n        // Input parameter updated\n        const { ind, paramField: { type } } = state;\n        const inputParams = [...formState.inputParams];\n        inputParams[ind] = { type, value };\n        res = { ...formState, inputParams };\n      } else if (state === 'palletRpc') {\n        res = { ...formState, [state]: value, callable: '', inputParams: [] };\n      } else if (state === 'callable') {\n        res = { ...formState, [state]: value, inputParams: [] };\n      }\n      return res;\n    });\n  };\n\n  const onInterxTypeChange = (ev, data) => {\n    setInterxType(data.value);\n    // clear the formState\n    setFormState(initFormState);\n  };\n\n  const getOptionalMsg = (interxType) =>\n    interxType === 'RPC'\n      ? 'Optional Parameter'\n      : 'Leaving this field as blank will submit a NONE value';\n\n  return (\n    <Grid.Column width={8}>\n      <h1>dApps-Staking Pallet Interactor</h1>\n      <Form>\n        <Form.Group style={{ overflowX: 'auto' }} inline>\n          <label>Interaction Type</label>\n          <Form.Radio\n            label='Extrinsic'\n            name='interxType'\n            value='EXTRINSIC'\n            checked={interxType === 'EXTRINSIC'}\n            onChange={onInterxTypeChange}\n          />\n          <Form.Radio\n            label='Query'\n            name='interxType'\n            value='QUERY'\n            checked={interxType === 'QUERY'}\n            onChange={onInterxTypeChange}\n          />\n          <Form.Radio\n            label='RPC'\n            name='interxType'\n            value='RPC'\n            checked={interxType === 'RPC'}\n            onChange={onInterxTypeChange}\n          />\n          <Form.Radio\n            label='Constant'\n            name='interxType'\n            value='CONSTANT'\n            checked={interxType === 'CONSTANT'}\n            onChange={onInterxTypeChange}\n          />\n        </Form.Group>\n        <Form.Field>\n          <Dropdown\n            placeholder='Pallets / RPC'\n            fluid\n            label='Pallet / RPC'\n            onChange={onPalletCallableParamChange}\n            search\n            selection\n            state='palletRpc'\n            value={palletRpc}\n            options={palletRPCs}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Dropdown\n            placeholder='Callables'\n            fluid\n            label='Callable'\n            onChange={onPalletCallableParamChange}\n            search\n            selection\n            state='callable'\n            value={callable}\n            options={callables}\n          />\n        </Form.Field>\n        {paramFields.map((paramField, ind) =>\n          <Form.Field key={`${paramField.name}-${paramField.type}`}>\n            <Input\n              placeholder={paramField.type}\n              fluid\n              type='text'\n              label={paramField.name}\n              state={{ ind, paramField }}\n              value={inputParams[ind] ? inputParams[ind].value : ''}\n              onChange={onPalletCallableParamChange}\n            />\n            {paramField.optional\n              ? <Label\n                basic\n                pointing\n                color='teal'\n                content={getOptionalMsg(interxType)}\n              />\n              : null\n            }\n          </Form.Field>\n        )}\n        <Form.Field style={{ textAlign: 'center' }}>\n          <InteractorSubmit\n            accountPair={accountPair}\n            setStatus={setStatus}\n            attrs={{ interxType, palletRpc, callable, inputParams, paramFields }}\n          />\n        </Form.Field>\n        <div style={{ overflowWrap: 'break-word' }}>{status}</div>\n      </Form>\n    </Grid.Column>\n  );\n}\n\nfunction InteractorSubmit (props) {\n  const { attrs: { interxType } } = props;\n  if (interxType === 'QUERY') {\n    // console.log('TxButton InteractorSubmit props = ', props);\n\n    return <TxButton\n      label='Query'\n      type='QUERY'\n      color='blue'\n      {...props}\n    />;\n  } else if (interxType === 'EXTRINSIC') {\n    return <TxGroupButton {...props} />;\n  } else if (interxType === 'RPC' || interxType === 'CONSTANT') {\n    return <TxButton\n      label='Submit'\n      type={interxType}\n      color='blue'\n      {...props}\n    />;\n  }\n}\n\nexport default function DSInteractor (props) {\n  const { api } = useSubstrate();\n  return api.tx ? <Main {...props} /> : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Statistic, Grid, Card, Icon, Progress } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const [dappsCount, setDappsCount] = useState(0);\n  const [contracts, setContracts] = useState([]);\n  const [numStakers, setNumStakers] = useState(0);\n  const [fillup, setFillup] = useState(0);\n\n  const getAddressEnum = (address) => (\n    { Evm: address }\n  );\n\n  useEffect(() => {\n    const calcProgress = async () => {\n      try {\n        const maxStakers = await api.consts.dappsStaking.maxNumberOfStakersPerContract.toNumber();\n        const available = dappsCount * maxStakers;\n        setFillup(numStakers / available * 100);\n      } catch (err) { console.error(err); }\n    };\n    calcProgress();\n  }, [dappsCount, api.consts.dappsStaking.maxNumberOfStakersPerContract, numStakers]);\n\n  useEffect(() => {\n    const fetchContracts = async () => {\n      try {\n        let result = await api.query.dappsStaking.registeredDapps.keys();\n        result = result.map(c => '0x' + c.toString().slice(-40));\n        setContracts(result);\n      } catch (err) { console.error(err); }\n    };\n    fetchContracts();\n  }, [api.query.dappsStaking]);\n\n  useEffect(() => {\n    const calcNumStakers = async () => {\n      const currentEra = (await api.query.dappsStaking.currentEra()).toNumber();\n      contracts.forEach(async selectedContract => {\n        // iterate from currentEra backwards until you find record for ContractEraStake\n        for (let era = currentEra; era > 0; era -= 1) {\n          try {\n            const staking_info = (await api.query.dappsStaking.contractEraStake(\n              getAddressEnum(selectedContract), era\n            )).toJSON();\n\n            if (staking_info !== null){\n              // found record for ContractEraStake\n              const stakerNum = Object.keys(staking_info.stakers).length\n              console.log('Num stakers =', stakerNum );\n              setNumStakers(s => s + stakerNum);\n              break;\n            }\n          } catch (err) {\n            console.error(err);\n            console.log('DappsCount contractEraStake.entries failed');\n          }\n        }\n      });\n    };\n    calcNumStakers();\n  }, [api.query.dappsStaking, contracts]);\n\n  useEffect(() => {\n    const queryRegisteredDapps = async () => {\n      return await api.query.dappsStaking.registeredDapps.keys((result) => {\n        console.log('dappsCount =', result.length);\n        setDappsCount(result.length);\n      });\n    }\n\n    const unsub = queryRegisteredDapps();\n\n    return function cleanup() {\n      unsub;\n    };\n  });\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content textAlign='center'>\n          <Statistic\n            label='dApps Count'\n            value={dappsCount}\n          />\n        </Card.Content>\n        <Card.Content extra>\n          Stakers Count and Capacity:\n          <Icon name='user' /> {numStakers}\n          <Progress percent={fillup} indicating warning />\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n\nexport default function DappsCount (props) {\n  const { api } = useSubstrate();\n  return api.query.dappsStaking &&\n    api.query.dappsStaking.registeredDapps\n    ? <Main {...props} />\n    : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Card, Icon, Grid } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main (props) {\n  const { api, socket } = useSubstrate();\n  const [nodeInfo, setNodeInfo] = useState({});\n\n  useEffect(() => {\n    const getInfo = async () => {\n      try {\n        const [chain, nodeName, nodeVersion] = await Promise.all([\n          api.rpc.system.chain(),\n          api.rpc.system.name(),\n          api.rpc.system.version()\n        ]);\n        setNodeInfo({ chain, nodeName, nodeVersion });\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    getInfo();\n  }, [api.rpc.system]);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content>\n          <Card.Header>{nodeInfo.nodeName}</Card.Header>\n          <Card.Meta>\n            <span>{nodeInfo.chain}</span>\n          </Card.Meta>\n          <Card.Description>{socket}</Card.Description>\n        </Card.Content>\n        <Card.Content extra>\n          <Icon name='setting' />v{nodeInfo.nodeVersion}\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n\nexport default function NodeInfo (props) {\n  const { api } = useSubstrate();\n  return api.rpc &&\n    api.rpc.system &&\n    api.rpc.system.chain &&\n    api.rpc.system.name &&\n    api.rpc.system.version\n    ? <Main {...props} />\n    : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Icon, Step } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\nconst DECIMALS = 1_000_000_000_000_000_000;\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const [blocksPerEra, setBlocksPerEra] = useState(0);\n  const [maxStakers, setMaxStakers] = useState(0);\n  const [historyDepth, setHistoryDepth] = useState(0);\n  const [minStaking, setMinStaking] = useState(0);\n\n  useEffect(() => {\n    let unsubscribe;\n    const blockPerEra = api.consts.dappsStaking.blockPerEra.toNumber();\n    setBlocksPerEra(blockPerEra);\n    const stakers = api.consts.dappsStaking.maxNumberOfStakersPerContract.toNumber();\n    setMaxStakers(stakers);\n    const depth = api.consts.dappsStaking.historyDepth.toNumber();\n    setHistoryDepth(depth);\n    const stakingAmount = api.consts.dappsStaking.minimumStakingAmount.valueOf();\n    setMinStaking(parseInt(stakingAmount / DECIMALS));\n    return () => unsubscribe;\n  }, [api.consts]);\n\n  return (\n    <Step.Group>\n      <Step active>\n        <Icon name='truck' />\n        <Step.Content>\n          <Step.Title>{blocksPerEra}</Step.Title>\n          <Step.Description>Blocks per Era</Step.Description>\n        </Step.Content>\n      </Step>\n\n      <Step active>\n        <Icon name='user' />\n        <Step.Content>\n          <Step.Title>{maxStakers}</Step.Title>\n          <Step.Description>Max Stakers per contract </Step.Description>\n        </Step.Content>\n      </Step>\n\n      <Step active>\n        <Icon name='exclamation triangle' />\n        <Step.Content>\n          <Step.Title>{historyDepth}</Step.Title>\n          <Step.Description>Rewards expire (in eras) </Step.Description>\n        </Step.Content>\n      </Step>\n      <Step active>\n        <Icon name='money bill alternate' />\n        <Step.Content>\n          <Step.Title>{minStaking}</Step.Title>\n          <Step.Description>Minimum staking amount </Step.Description>\n        </Step.Content>\n      </Step>\n    </Step.Group>\n  );\n}\n\nexport default function Constants (props) {\n  const { api } = useSubstrate();\n  return api.consts\n    ? <Main {...props} />\n    : null;\n}\n","import React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport config from './config';\n\nimport {\n  Dropdown,\n  Container\n} from 'semantic-ui-react';\n\nfunction Main (props) {\n  const [networkSelected, setNetworkSelected] = useState('');\n\n  const networkOptions =\n    [\n      {\n        key: 'Shiden', text: 'Shiden (mainnet)', value: 'wss://shiden.api.onfinality.io/public-ws'\n      },\n      {\n        key: 'Shibuya', text: 'Shibuya (testnet)', value: 'wss://rpc.shibuya.astar.network'\n      },\n      {\n        key: 'Local', text: 'Local', value: 'ws://127.0.0.1:9944'\n      }\n    ];\n\n  // Set the initial address\n  useEffect(() => {\n    const parsedQuery = queryString.parseUrl(window.location.search);\n    setNetworkSelected(parsedQuery.query.rpc || config.PROVIDER_SOCKET);\n  }, []);\n\n  const onChange = network => {\n    setNetworkSelected(network);\n\n    const parsedQuery = queryString.parseUrl(window.location.search);\n    parsedQuery.query.rpc = network;\n    window.location = queryString.stringifyUrl(parsedQuery);\n  };\n\n  return (\n    <Container>\n      <Dropdown\n        search\n        selection\n        clearable\n        placeholder='Select the Network'\n        options={networkOptions}\n        onChange={(_, dropdown) => {\n          onChange(dropdown.value);\n        }}\n        value={networkSelected}\n      />\n    </Container>\n  );\n}\n\nexport default function Network (props) {\n  return <Main {...props} />;\n}\n","import React, { useState, createRef } from 'react';\nimport { Container, Dimmer, Loader, Grid, Sticky, Message, Segment, Image, Divider } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\n\nimport { SubstrateContextProvider, useSubstrate } from './substrate-lib';\nimport { DeveloperConsole } from './substrate-lib/components';\n\n// import NetworkSelector from './NetworkSelector';\nimport ContractExplorer from './ContractExplorer';\n// import Balances from './Balances';\nimport EraStaked from './EraStaked';\n// import BlockNumber from './BlockNumber';\nimport EraNumber from './EraNumber';\nimport DSInteractor from './DSInteractor';\nimport DappsCount from './DappsCount';\n// import Metadata from './Metadata';\nimport NodeInfo from './NodeInfo';\nimport Constants from './Constants';\nimport Network from './Network';\n// import AllContracts from './AllContracts';\n\n// import Transfer from './Transfer';\n// import Upgrade from './Upgrade';\n\nfunction Main () {\n  const [accountAddress] = useState(null);\n  const { apiState, keyring, keyringState, apiError } = useSubstrate();\n  const accountPair =\n    accountAddress &&\n    keyringState === 'READY' &&\n    keyring.getPair(accountAddress);\n\n  const loader = text =>\n    <Dimmer active>\n      <Loader size='small'>{text}</Loader>\n    </Dimmer>;\n\n  const message = err =>\n    <Grid centered columns={2} padded>\n      <Grid.Column>\n        <Message negative compact floating\n          header='Error Connecting to Substrate'\n          content={`${JSON.stringify(err, null, 4)}`}\n        />\n      </Grid.Column>\n      <Grid.Column>\n        <Network />\n      </Grid.Column>\n    </Grid>;\n\n  if (apiState === 'ERROR') return message(apiError);\n  else if (apiState !== 'READY') return loader('Connecting to Substrate');\n\n  if (keyringState !== 'READY') {\n    return loader('Loading accounts (please review any extension\\'s authorization)');\n  }\n\n  const contextRef = createRef();\n\n  return (\n    <div ref={contextRef}>\n      <Sticky context={contextRef}>\n        <Grid centered columns={2}>\n\n        </Grid>\n      </Sticky>\n      <Divider />\n      <Container>\n        <style>\n          {`\n            html, body {\n              background-color: #252839 !important;\n            }\n            p {\n              align-content: center;\n              background-color: #495285;\n              color: #fff;\n              display: flex;\n              flex-direction: column;\n              justify-content: center;\n              min-height: 6em;\n            }\n            p > span {\n              opacity: 0.4;\n              text-align: center;\n            }\n          }\n          `}\n        </style>\n        <Grid stackable columns='equal'>\n          <Grid.Row>\n            <Image src={`${process.env.PUBLIC_URL}/assets/astar_dashboard.png`} size='huge' />\n            <Network />\n          </Grid.Row>\n          <Grid.Row stretched>\n            <EraNumber />\n            <DappsCount />\n            <EraStaked />\n            <NodeInfo />\n          </Grid.Row>\n          <Divider />\n          <Grid.Row>\n            <Constants />\n          </Grid.Row>\n          <Divider />\n          {/* <Grid.Row stretched>\n            <Balances />\n          </Grid.Row> */}\n          {/* <Grid.Row>\n            <Transfer accountPair={accountPair} />\n            <Upgrade accountPair={accountPair} />\n          </Grid.Row> */}\n          <Grid.Row>\n            <Segment raised>\n              <ContractExplorer />\n            </Segment>\n          </Grid.Row>\n          <Divider />\n          {/* <Grid.Row>\n            <AllContracts/>\n          </Grid.Row> */}\n          <Grid.Row>\n            <Segment raised>\n              <DSInteractor accountPair={accountPair} />\n            </Segment>\n          </Grid.Row>\n        </Grid>\n      </Container>\n      <DeveloperConsole />\n    </div>\n  );\n}\n\nexport default function App () {\n  return (\n    <SubstrateContextProvider>\n      <Main />\n    </SubstrateContextProvider>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}