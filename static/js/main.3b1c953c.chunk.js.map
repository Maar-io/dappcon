{"version":3,"sources":["config/index.js","substrate-lib/SubstrateContext.js","substrate-lib/utils.js","substrate-lib/components/TxButton.js","substrate-lib/components/DeveloperConsole.js","NamedContracts.js","ContractExplorer.js","EraStaked.js","EraNumber.js","DSInteractor.js","DappsCount.js","NodeInfo.js","Constants.js","Network.js","App.js","index.js"],"names":["configEnv","require","types","envVars","reduce","mem","n","undefined","process","slice","config","configCommon","connectedSocket","queryString","parse","window","location","search","rpc","PROVIDER_SOCKET","console","log","INIT_STATE","socket","jsonrpc","RPC","keyring","keyringState","api","apiError","apiState","reducer","state","action","type","payload","Error","loadAccts","SubstrateContext","React","createContext","SubstrateContextProvider","props","initState","forEach","key","useReducer","dispatch","provider","WsProvider","_api","ApiPromise","on","isReady","then","err","connect","asyncLoadAccounts","a","web3Enable","APP_NAME","web3Accounts","allAccounts","map","address","meta","name","source","loadAll","isDevelopment","DEVELOPMENT_KEYRING","error","loadAccounts","Provider","value","children","useSubstrate","useContext","utils","paramConversion","num","TxButton","accountPair","label","setStatus","color","style","attrs","disabled","useState","unsub","setUnsub","sudoKey","setSudoKey","palletRpc","callable","inputParams","paramFields","isSudo","isUncheckedSudo","useEffect","query","sudo","isEmpty","toString","acctPair","getFromAcct","isInjected","web3FromSource","injected","fromAcct","setSigner","signer","txResHandler","status","isFinalized","asFinalized","txErrHandler","sudoTx","transformed","transformParams","txExecute","tx","signAndSend","catch","uncheckedSudoTx","sudoUncheckedWeight","signedTx","unsignedTx","send","queryResHandler","result","isNone","emptyAsNull","constant","consts","transaction","opts","paramVal","inputParam","trim","params","field","ind","memo","converted","indexOf","split","e","single","isNumType","Number","parseFloat","parseInt","some","el","Button","basic","onClick","length","every","paramField","param","optional","TxGroupButton","Group","Or","DeveloperConsole","util","utilCrypto","projectContractName","DECIMALS","Main","contracts","setContracts","selectedContract","setSelectedContract","formState","setFormState","developer","setDeveloper","totalStaked","setTotalStaked","claimedRewards","setClaimedRewards","numStakers","setNumStakers","erasToClaim","setErasToClaim","firstTime","setFirstTimeStaked","unclaimedEras","setUnclaimedEras","projectName","setProjectName","getAddressEnum","Evm","fetchContracts","dappsStaking","registeredDapps","keys","r","c","contractList","text","queryDeveloper","res","unwrap","toHuman","getInfo","contractEraStakeMap","Map","eraInfoMap","contractEraStake","entries","points","eraKey","args","k","set","toJSON","generalEraInfo","eraInfo","unclaimed","contractStakeInfo","contractRewardClaimed","size","firstStaked","Math","min","currentEra","current","toNumber","entry","get","stakerNum","numberOfStakers","total","rewarded","unclaimedEra","era","ratio","staked","rewards","dapps","Grid","Column","width","Form","Field","Dropdown","placeholder","fluid","onChange","_","data","selection","options","DisplayTable","contract","overflowWrap","alt","src","Table","Header","Row","HeaderCell","Body","Cell","as","Content","Subheader","Icon","ContractExplorer","setCurrentEra","stakedTotal","setStakedTotal","totalReward","setTotalRewards","dappReward","setDappRewards","tvl","valueOf","blockRewardAccumulator","stakers","Card","textAlign","Statistic","extra","EraStaked","blockCountdown","setBlockCountdown","progress","setProgress","blockPerEra","bestNumber","derive","chain","unsubscribeAll","number","Progress","percent","indicating","success","CurrentEra","argIsOptional","arg","startsWith","interxType","setInterxType","palletRPCs","callables","setCallables","setParamFields","initFormState","Object","getApiType","sort","metaType","isPlain","isMap","asMap","isDoubleMap","asDoubleMap","key1","key2","metaArgs","metaParam","isOptional","onPalletCallableParamChange","onInterxTypeChange","ev","getOptionalMsg","overflowX","inline","Radio","checked","Input","Label","pointing","content","InteractorSubmit","DSInteractor","dappsCount","setDappsCount","fillup","setFillup","calcProgress","maxNumberOfStakersPerContract","maxStakers","calcNumStakers","stakingInfo","s","system","events","record","event","section","method","warning","DappsCount","nodeInfo","setNodeInfo","Promise","all","version","nodeName","nodeVersion","Meta","Description","NodeInfo","blocksPerEra","setBlocksPerEra","setMaxStakers","minStaking","setMinStaking","stakingAmount","minimumStakingAmount","Step","active","Title","Constants","networkSelected","setNetworkSelected","parsedQuery","parseUrl","Container","clearable","dropdown","network","stringifyUrl","Network","accountAddress","getPair","loader","Dimmer","Loader","centered","columns","padded","Message","negative","compact","floating","header","JSON","stringify","contextRef","createRef","ref","Sticky","context","Divider","stackable","Image","stretched","Segment","raised","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3b1c953c.chunk.js","sourcesContent":["import configCommon from './common.json';\n// Using `require` as `import` does not support dynamic loading (yet).\nconst configEnv = require(`./${process.env.NODE_ENV}.json`);\nconst types = require('./types.json');\n\n// Accepting React env vars and aggregating them into `config` object.\nconst envVarNames = [\n  'REACT_APP_PROVIDER_SOCKET',\n  'REACT_APP_DEVELOPMENT_KEYRING'\n];\nconst envVars = envVarNames.reduce((mem, n) => {\n  // Remove the `REACT_APP_` prefix\n  if (process.env[n] !== undefined) mem[n.slice(10)] = process.env[n];\n  return mem;\n}, {});\n\nconst config = { ...configCommon, ...configEnv, ...envVars, types };\nexport default config;\n","import React, { useReducer, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport jsonrpc from '@polkadot/types/interfaces/jsonrpc';\nimport queryString from 'query-string';\n\nimport { ApiPromise, WsProvider } from '@polkadot/api';\nimport { web3Accounts, web3Enable } from '@polkadot/extension-dapp';\nimport keyring from '@polkadot/ui-keyring';\n\nimport config from '../config';\n\nconst parsedQuery = queryString.parse(window.location.search);\nconst connectedSocket = parsedQuery.rpc || config.PROVIDER_SOCKET;\nconsole.log(`Connected socket: ${connectedSocket}`);\n\n///\n// Initial state for `useReducer`\n\nconst INIT_STATE = {\n  socket: connectedSocket,\n  jsonrpc: { ...jsonrpc, ...config.RPC },\n  types: config.types,\n  keyring: null,\n  keyringState: null,\n  api: null,\n  apiError: null,\n  apiState: null\n};\n\n///\n// Reducer function for `useReducer`\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'CONNECT_INIT':\n      return { ...state, apiState: 'CONNECT_INIT' };\n\n    case 'CONNECT':\n      return { ...state, api: action.payload, apiState: 'CONNECTING' };\n\n    case 'CONNECT_SUCCESS':\n      return { ...state, apiState: 'READY' };\n\n    case 'CONNECT_ERROR':\n      return { ...state, apiState: 'ERROR', apiError: action.payload };\n\n    case 'LOAD_KEYRING':\n      return { ...state, keyringState: 'LOADING' };\n\n    case 'SET_KEYRING':\n      return { ...state, keyring: action.payload, keyringState: 'READY' };\n\n    case 'KEYRING_ERROR':\n      return { ...state, keyring: null, keyringState: 'ERROR' };\n\n    default:\n      throw new Error(`Unknown type: ${action.type}`);\n  }\n};\n\n///\n// Connecting to the Substrate node\n\nconst connect = (state, dispatch) => {\n  const { apiState, socket, jsonrpc, types } = state;\n  // We only want this function to be performed once\n  if (apiState) return;\n\n  dispatch({ type: 'CONNECT_INIT' });\n\n  const provider = new WsProvider(socket);\n  const _api = new ApiPromise({ provider, types, rpc: jsonrpc });\n\n  // Set listeners for disconnection and reconnection event.\n  _api.on('connected', () => {\n    dispatch({ type: 'CONNECT', payload: _api });\n    // `ready` event is not emitted upon reconnection and is checked explicitly here.\n    _api.isReady.then((_api) => dispatch({ type: 'CONNECT_SUCCESS' }));\n  });\n  _api.on('ready', () => dispatch({ type: 'CONNECT_SUCCESS' }));\n  _api.on('error', err => dispatch({ type: 'CONNECT_ERROR', payload: err }));\n};\n\n///\n// Loading accounts from dev and polkadot-js extension\n\nlet loadAccts = false;\nconst loadAccounts = (state, dispatch) => {\n  const asyncLoadAccounts = async () => {\n    dispatch({ type: 'LOAD_KEYRING' });\n    try {\n      await web3Enable(config.APP_NAME);\n      let allAccounts = await web3Accounts();\n      allAccounts = allAccounts.map(({ address, meta }) =>\n        ({ address, meta: { ...meta, name: `${meta.name} (${meta.source})` } }));\n      keyring.loadAll({ isDevelopment: config.DEVELOPMENT_KEYRING }, allAccounts);\n      dispatch({ type: 'SET_KEYRING', payload: keyring });\n    } catch (e) {\n      console.error(e);\n      dispatch({ type: 'KEYRING_ERROR' });\n    }\n  };\n\n  const { keyringState } = state;\n  // If `keyringState` is not null `asyncLoadAccounts` is running.\n  if (keyringState) return;\n  // If `loadAccts` is true, the `asyncLoadAccounts` has been run once.\n  if (loadAccts) return dispatch({ type: 'SET_KEYRING', payload: keyring });\n\n  // This is the heavy duty work\n  loadAccts = true;\n  asyncLoadAccounts();\n};\n\nconst SubstrateContext = React.createContext();\n\nconst SubstrateContextProvider = (props) => {\n  // filtering props and merge with default param value\n  const initState = { ...INIT_STATE };\n  const neededPropNames = ['socket', 'types'];\n  neededPropNames.forEach(key => {\n    initState[key] = (typeof props[key] === 'undefined' ? initState[key] : props[key]);\n  });\n\n  const [state, dispatch] = useReducer(reducer, initState);\n  connect(state, dispatch);\n  loadAccounts(state, dispatch);\n\n  return <SubstrateContext.Provider value={state}>\n    {props.children}\n  </SubstrateContext.Provider>;\n};\n\n// prop typechecking\nSubstrateContextProvider.propTypes = {\n  socket: PropTypes.string,\n  types: PropTypes.object\n};\n\nconst useSubstrate = () => ({ ...useContext(SubstrateContext) });\n\nexport { SubstrateContextProvider, useSubstrate };\n","const utils = {\n  paramConversion: {\n    num: [\n      'Compact<Balance>',\n      'BalanceOf',\n      'u8', 'u16', 'u32', 'u64', 'u128',\n      'i8', 'i16', 'i32', 'i64', 'i128'\n    ]\n  }\n};\n\nexport default utils;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from 'semantic-ui-react';\nimport { web3FromSource } from '@polkadot/extension-dapp';\n\nimport { useSubstrate } from '../';\nimport utils from '../utils';\n\nfunction TxButton ({\n  accountPair = null,\n  label,\n  setStatus,\n  color = 'blue',\n  style = null,\n  type = 'QUERY',\n  attrs = null,\n  disabled = false\n}) {\n  // Hooks\n  const { api } = useSubstrate();\n  const [unsub, setUnsub] = useState(null);\n  const [sudoKey, setSudoKey] = useState(null);\n\n  const { palletRpc, callable, inputParams, paramFields } = attrs;\n\n  const isQuery = () => type === 'QUERY';\n  const isSudo = () => type === 'SUDO-TX';\n  const isUncheckedSudo = () => type === 'UNCHECKED-SUDO-TX';\n  const isUnsigned = () => type === 'UNSIGNED-TX';\n  const isSigned = () => type === 'SIGNED-TX';\n  const isRpc = () => type === 'RPC';\n  const isConstant = () => type === 'CONSTANT';\n\n  const loadSudoKey = () => {\n    (async function () {\n      if (!api || !api.query.sudo) { return; }\n      const sudoKey = await api.query.sudo.key();\n      sudoKey.isEmpty ? setSudoKey(null) : setSudoKey(sudoKey.toString());\n    })();\n  };\n\n  useEffect(loadSudoKey, [api]);\n\n  const getFromAcct = async () => {\n    const {\n      address,\n      meta: { source, isInjected }\n    } = accountPair;\n    let fromAcct;\n\n    // signer is from Polkadot-js browser extension\n    if (isInjected) {\n      const injected = await web3FromSource(source);\n      fromAcct = address;\n      api.setSigner(injected.signer);\n    } else {\n      fromAcct = accountPair;\n    }\n\n    return fromAcct;\n  };\n\n  const txResHandler = ({ status }) =>\n    status.isFinalized\n      ? setStatus(`😉 Finalized. Block hash: ${status.asFinalized.toString()}`)\n      : setStatus(`Current transaction status: ${status.type}`);\n\n  const txErrHandler = err =>\n    setStatus(`😞 Transaction Failed: ${err.toString()}`);\n\n  const sudoTx = async () => {\n    const fromAcct = await getFromAcct();\n    const transformed = transformParams(paramFields, inputParams);\n    // transformed can be empty parameters\n    const txExecute = transformed\n      ? api.tx.sudo.sudo(api.tx[palletRpc][callable](...transformed))\n      : api.tx.sudo.sudo(api.tx[palletRpc][callable]());\n\n    const unsub = txExecute.signAndSend(fromAcct, txResHandler)\n      .catch(txErrHandler);\n    setUnsub(() => unsub);\n  };\n\n  const uncheckedSudoTx = async () => {\n    const fromAcct = await getFromAcct();\n    const txExecute =\n        api.tx.sudo.sudoUncheckedWeight(api.tx[palletRpc][callable](...inputParams), 0);\n\n    const unsub = txExecute.signAndSend(fromAcct, txResHandler)\n      .catch(txErrHandler);\n    setUnsub(() => unsub);\n  };\n\n  const signedTx = async () => {\n    const fromAcct = await getFromAcct();\n    const transformed = transformParams(paramFields, inputParams);\n    // transformed can be empty parameters\n\n    const txExecute = transformed\n      ? api.tx[palletRpc][callable](...transformed)\n      : api.tx[palletRpc][callable]();\n\n    const unsub = await txExecute.signAndSend(fromAcct, txResHandler)\n      .catch(txErrHandler);\n    setUnsub(() => unsub);\n  };\n\n  const unsignedTx = async () => {\n    const transformed = transformParams(paramFields, inputParams);\n    // transformed can be empty parameters\n    const txExecute = transformed\n      ? api.tx[palletRpc][callable](...transformed)\n      : api.tx[palletRpc][callable]();\n\n    const unsub = await txExecute.send(txResHandler)\n      .catch(txErrHandler);\n    setUnsub(() => unsub);\n  };\n\n  const queryResHandler = result =>\n    result.isNone ? setStatus('None') : setStatus(result.toString());\n\n  const query = async () => {\n    const transformed = transformParams(paramFields, inputParams);\n    const unsub = await api.query[palletRpc][callable](...transformed, queryResHandler);\n    setUnsub(() => unsub);\n  };\n\n  const rpc = async () => {\n    const transformed = transformParams(paramFields, inputParams, { emptyAsNull: false });\n    const unsub = await api.rpc[palletRpc][callable](...transformed, queryResHandler);\n    setUnsub(() => unsub);\n  };\n\n  const constant = () => {\n    const result = api.consts[palletRpc][callable];\n    result.isNone ? setStatus('None') : setStatus(result.toString());\n  };\n\n  const transaction = async () => {\n    if (unsub) {\n      unsub();\n      setUnsub(null);\n    }\n\n    setStatus('Sending...');\n\n    (isSudo() && sudoTx()) ||\n    (isUncheckedSudo() && uncheckedSudoTx()) ||\n    (isSigned() && signedTx()) ||\n    (isUnsigned() && unsignedTx()) ||\n    (isQuery() && query()) ||\n    (isRpc() && rpc()) ||\n    (isConstant() && constant());\n  };\n\n  const transformParams = (paramFields, inputParams, opts = { emptyAsNull: true }) => {\n    // if `opts.emptyAsNull` is true, empty param value will be added to res as `null`.\n    //   Otherwise, it will not be added\n    const paramVal = inputParams.map(inputParam => {\n      // To cater the js quirk that `null` is a type of `object`.\n      if (typeof inputParam === 'object' && inputParam !== null && typeof inputParam.value === 'string') {\n        return inputParam.value.trim();\n      } else if (typeof inputParam === 'string') {\n        return inputParam.trim();\n      }\n      return inputParam;\n    });\n    const params = paramFields.map((field, ind) => ({ ...field, value: paramVal[ind] || null }));\n\n    return params.reduce((memo, { type = 'string', value }) => {\n      if (value == null || value === '') return (opts.emptyAsNull ? [...memo, null] : memo);\n\n      let converted = value;\n\n      // Deal with a vector\n      if (type.indexOf('Vec<') >= 0) {\n        converted = converted.split(',').map(e => e.trim());\n        converted = converted.map(single => isNumType(type)\n          ? (single.indexOf('.') >= 0 ? Number.parseFloat(single) : Number.parseInt(single))\n          : single\n        );\n        return [...memo, converted];\n      }\n\n      // Deal with a single value\n      if (isNumType(type)) {\n        converted = converted.indexOf('.') >= 0 ? Number.parseFloat(converted) : Number.parseInt(converted);\n      }\n      return [...memo, converted];\n    }, []);\n  };\n\n  const isNumType = type =>\n    utils.paramConversion.num.some(el => type.indexOf(el) >= 0);\n\n  const allParamsFilled = () => {\n    if (paramFields.length === 0) { return true; }\n\n    return paramFields.every((paramField, ind) => {\n      const param = inputParams[ind];\n      if (paramField.optional) { return true; }\n      if (param == null) { return false; }\n\n      const value = typeof param === 'object' ? param.value : param;\n      return value !== null && value !== '';\n    });\n  };\n\n  const isSudoer = acctPair => {\n    if (!sudoKey || !acctPair) { return false; }\n    return acctPair.address === sudoKey;\n  };\n\n  return (\n    <Button\n      basic\n      color={color}\n      style={style}\n      type='submit'\n      onClick={transaction}\n      disabled={ disabled || !palletRpc || !callable || !allParamsFilled() ||\n        ((isSudo() || isUncheckedSudo()) && !isSudoer(accountPair)) }\n    >\n      {label}\n    </Button>\n  );\n}\n\n// prop type checking\nTxButton.propTypes = {\n  accountPair: PropTypes.object,\n  setStatus: PropTypes.func.isRequired,\n  type: PropTypes.oneOf([\n    'QUERY', 'RPC', 'SIGNED-TX', 'UNSIGNED-TX', 'SUDO-TX', 'UNCHECKED-SUDO-TX',\n    'CONSTANT']).isRequired,\n  attrs: PropTypes.shape({\n    palletRpc: PropTypes.string,\n    callable: PropTypes.string,\n    inputParams: PropTypes.array,\n    paramFields: PropTypes.array\n  }).isRequired\n};\n\nfunction TxGroupButton (props) {\n  return (\n    <Button.Group>\n      <TxButton\n        label='Unsigned'\n        type='UNSIGNED-TX'\n        color='grey'\n        {...props}\n      />\n      <Button.Or />\n      <TxButton\n        label='Signed'\n        type='SIGNED-TX'\n        color='blue'\n        {...props}\n      />\n      <Button.Or />\n      <TxButton\n        label='SUDO'\n        type='SUDO-TX'\n        color='red'\n        {...props}\n      />\n    </Button.Group>\n  );\n}\n\nexport { TxButton, TxGroupButton };\n","// This component will simply add utility functions to your developer console.\nimport { useSubstrate } from '../';\n\nexport default function DeveloperConsole (props) {\n  const { api, apiState, keyring, keyringState } = useSubstrate();\n  if (apiState === 'READY') { window.api = api; }\n  if (keyringState === 'READY') { window.keyring = keyring; }\n  window.util = require('@polkadot/util');\n  window.utilCrypto = require('@polkadot/util-crypto');\n\n  return null;\n}\n","export const projectContractName = {\n  // Astar contracts\n  '0x95f506e72777efcb3c54878bb4160b00cd11cd84': 'Astar Exchange',\n  '0xd59fc6bfd9732ab19b03664a45dc29b8421bda9a': 'Astar Degens',\n  '0xa602d021da61ec4cc44dedbd4e3090a05c97a435': 'Astar Network',\n  '0x48f292e9fdce07ba34217b0aa62e08b62376df3e': 'OnFinality',\n  '0xe915d2393a08a00c5a463053edd31bae2199b9e7': 'ArthSwap',\n  '0xc4335b1b76fa6d52877b3046eca68f6e708a27dd': 'Starlay Finance',\n  '0x101b453a02f961b4e3f0526ecd4c533c3a80d795': 'Community Rewards',\n  '0xcdb32eed99aa19d39e5d6ec45ba74dc4afec549f': 'Orcus',\n  '0x1de7c3a07918fb4be9159703e73d6e0b0736cabc': 'ADAO',\n  '0xaab44542c72f88f7b98fffda418e3efe94bc13af': 'Astar Farm',\n  '0x9448610696659de8f72e1831d392214ae1ca4838': 'Sirius Finance',\n  '0xa5efb5bf75bbb607dc243707a83f2af5ed4e9813': 'TofuNFT',\n\n  // Shiden contracts\n  '0x4633c1f0f633cc42fd0ba394762283606c88ae52': 'Standard Protocol',\n  '0x2b9a7085afba278bec6bbffb399a3c042ed05046': 'Webb',\n  '0xc8ef7176757f54b6aefa965958f8da4a1c5992e1': 'Subscan',\n  '0xa1617cd6a7eaa6c408faac2030e0c27f2a7c17e7': 'PolkaEx',\n  '0x4d4e6e07d480f3aae931c31430bc61ea7ef29052': 'CryptoSpells',\n  '0xd9ca818d8db735fde245afaf55821ed7fa582d6c': 'EmiSwap',\n  '0xe0f41a9626ade6c2bfaade6e497dc584bc3e9dc5': 'Open Emoji Battler',\n  '0xf87c7872eff6f01de8efcb328471967b19e302a9': 'Community Rewards Program',\n  '0x602332522f85c2fc29603f1e26ff4a0a9b390ff2': 'Mochi Market'\n};\n","import React, { useEffect, useState } from 'react';\nimport { Grid, Form, Dropdown, Table, Header, Icon } from 'semantic-ui-react';\nimport { useSubstrate } from './substrate-lib';\nimport { projectContractName } from './NamedContracts';\nconst DECIMALS = 1_000_000_000_000_000_000;\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const [contracts, setContracts] = useState([]);\n  const [selectedContract, setSelectedContract] = useState(0);\n  const [formState, setFormState] = useState(0);\n  const [developer, setDeveloper] = useState(0);\n  const [totalStaked, setTotalStaked] = useState(0);\n  const [claimedRewards, setClaimedRewards] = useState(0);\n  const [numStakers, setNumStakers] = useState(0);\n  const [erasToClaim, setErasToClaim] = useState(0);\n  const [firstTime, setFirstTimeStaked] = useState(0);\n  const [unclaimedEras, setUnclaimedEras] = useState(0);\n  const [projectName, setProjectName] = useState('');\n\n  const getAddressEnum = (address) => ({ Evm: address });\n\n  const resetContractInfo = () => {\n    setDeveloper(0);\n    setNumStakers('?');\n    setTotalStaked(0);\n    setClaimedRewards('?');\n    setErasToClaim(0);\n    setUnclaimedEras('');\n    setProjectName('');\n  };\n\n  const onContractChange = (_, data) => {\n    resetContractInfo();\n    console.log('onContractChange value', data.value);\n    setSelectedContract(data.value);\n    setFormState(data.value);\n    setProjectName(projectContractName[data.value]);\n  };\n\n  const querycontractEraStakeMap = () => {\n    const getInfo = async () => {\n      const contractEraStakeMap = new Map();\n      const eraInfoMap = new Map();\n\n      try {\n        // fetch all contractEraStake entries for selected contract and convert to map\n        const contractEraStakeEntries =\n          await api.query.dappsStaking.contractEraStake.entries(\n            getAddressEnum(selectedContract)\n          );\n        contractEraStakeEntries.forEach(([key, points]) => {\n          // console.log('[key, points] = ', key, points);\n          const eraKey = parseInt(key.args.map((k) => k.toString())[1]);\n          // console.log('eraKey', eraKey);\n          contractEraStakeMap.set(eraKey, points.toJSON());\n        });\n\n        // fetch all generalEraInfo entries and convert to map\n        const eraInfoEntires =\n          await api.query.dappsStaking.generalEraInfo.entries();\n        eraInfoEntires.forEach(([key, eraInfo]) => {\n          const eraKey = parseInt(key.args.map((k) => k.toString())[0]);\n          // console.log('eraInfo', eraInfo.toJSON());\n          eraInfoMap.set(eraKey, eraInfo.toJSON());\n        });\n\n        // calculate unclaimed eras\n        let unclaimed = 0;\n        contractEraStakeMap.forEach((contractStakeInfo) => {\n          // console.log('contractStakeInfo = ', contractStakeInfo);\n          if (contractStakeInfo.contractRewardClaimed === false) unclaimed++;\n        });\n        console.log('unclaimed eras', unclaimed);\n        setErasToClaim(unclaimed - 1);\n\n        if (contractEraStakeMap.size !== 0) {\n          // First era with staking record\n          const firstStaked = Math.min(...contractEraStakeMap.keys());\n          setFirstTimeStaked(firstStaked);\n          console.log('firstStakedEra', firstStaked);\n\n          api.query.dappsStaking\n            .currentEra((currentEra) => {\n              const current = currentEra.toNumber();\n              console.log('currentEra', current);\n              const entry = contractEraStakeMap.get(current);\n\n              // number of stakers\n              const stakerNum = parseInt(entry.numberOfStakers);\n              console.log('numberOfStakers', stakerNum);\n              setNumStakers(stakerNum);\n\n              // total staked on the contract\n              const total = parseInt(entry.total / DECIMALS);\n              console.log('total', total);\n              setTotalStaked(total);\n\n              // calculate claimed rewards\n              let rewarded = 0;\n              let unclaimedEra = '';\n              for (let era = firstStaked; era <= currentEra; era++) {\n                const contractStakeInfo = contractEraStakeMap.get(era);\n                const eraInfo = eraInfoMap.get(era);\n                if (contractStakeInfo) {\n                  if (contractStakeInfo.contractRewardClaimed) {\n                    const ratio = contractStakeInfo.total / eraInfo.staked;\n                    // console.log('ratio', ratio);\n                    // console.log('available ', eraInfo.rewards.dapps / DECIMALS);\n                    // console.log('rewarded ', eraInfo.rewards.dapps * ratio / DECIMALS);\n                    rewarded += eraInfo.rewards.dapps * ratio;\n                  } else {\n                    unclaimedEra += era.toString() + ' ';\n                  }\n                  // console.log('contractStakeInfo = ', era + ' => ' + parseInt(contractStakeInfo.total / DECIMALS) + ' ' + contractStakeInfo.contractRewardClaimed);\n                } else {\n                  console.log(selectedContract + ' missing contractStakeInfo for era', era);\n                }\n              }\n              console.log('claimedRewards', parseInt(rewarded / DECIMALS));\n              console.log('unclaimedEra', unclaimedEra);\n              setClaimedRewards(parseInt(rewarded / DECIMALS));\n              setUnclaimedEras(unclaimedEra);\n            })\n            .catch(console.error);\n        }\n      } catch (err) {\n        console.error(err);\n        console.log('querycontractEraStakeMap failed');\n      }\n    };\n    getInfo();\n  };\n\n  useEffect(() => {\n    const fetchContracts = async () => {\n      try {\n        const result = await api.query.dappsStaking.registeredDapps.keys();\n        console.log('registeredDapps result', result);\n        const r = result.map((c) => '0x' + c.toString().slice(-40));\n        // console.log(r);\n        const contractList = r.map((c) => ({ key: c, value: c, text: c }));\n        console.log('fetchContracts', contractList);\n        setContracts(contractList);\n      } catch (err) {\n        console.error(err);\n        console.log('fetchContracts registeredDapps.keys() failed');\n      }\n    };\n    fetchContracts();\n  }, [api.query.dappsStaking]);\n\n  useEffect(() => {\n    const queryDeveloper = async () => {\n      try {\n        const result = await api.query.dappsStaking.registeredDapps(\n          getAddressEnum(selectedContract)\n        );\n        let res;\n        result.isNone\n          ? (res = 'none')\n          : (res = result.unwrap().developer.toHuman());\n        console.log('contract=', selectedContract, 'setDeveloper to', res);\n        setDeveloper(res);\n      } catch (err) {\n        console.error(err);\n        console.log('querycontractEraStakeMap registeredDapps failed');\n      }\n    };\n    queryDeveloper();\n  }, [api.query.dappsStaking, selectedContract]);\n\n  useEffect(querycontractEraStakeMap, [\n    api.query.dappsStaking,\n    selectedContract\n  ]);\n\n  return (\n    <Grid.Column width={8}>\n      <h1>Contract Explorer - {projectName}</h1>\n      <Form>\n        <Form.Field>\n          <Dropdown\n            placeholder='Contract'\n            fluid\n            label='Contract'\n            onChange={onContractChange}\n            search\n            selection\n            value={formState}\n            options={contracts}\n          />\n        </Form.Field>\n        <DisplayTable\n          developer={developer}\n          numStakers={numStakers}\n          firstTime={firstTime}\n          totalStaked={totalStaked}\n          claimedRewards={claimedRewards}\n          contract={selectedContract}\n          erasToClaim={erasToClaim}\n          unclaimedEras={unclaimedEras}\n        />\n      </Form>\n    </Grid.Column>\n  );\n}\n\nfunction DisplayTable (props) {\n  return (\n    <div style={{ overflowWrap: 'break-word' }}>\n      <img alt='robots' src={`https://robohash.org/${props.contract}`} />\n      <Table>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Contract Address</Table.HeaderCell>\n            <Table.HeaderCell>{props.contract}</Table.HeaderCell>\n          </Table.Row>\n          <Table.Row>\n            <Table.HeaderCell>Developer's account:</Table.HeaderCell>\n            <Table.HeaderCell>{props.developer}</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          <Table.Row>\n            <Table.Cell>\n              <Header as='h2'>\n                <Header.Content>\n                  {props.firstTime}\n                  <Header.Subheader>First Era Staked</Header.Subheader>\n                </Header.Content>\n              </Header>\n            </Table.Cell>\n            <Table.Cell>\n              <Header as='h2'>\n                <Header.Content>\n                  <Icon name='user' />\n                  {props.numStakers}\n                  <Header.Subheader>Number of Stakers</Header.Subheader>\n                </Header.Content>\n              </Header>\n            </Table.Cell>\n          </Table.Row>\n          <Table.Row>\n            <Table.Cell>\n              <Header as='h2'>\n                <Header.Content>\n                  {props.totalStaked}\n                  <Header.Subheader>Total Staked</Header.Subheader>\n                </Header.Content>\n              </Header>\n            </Table.Cell>\n            <Table.Cell>\n              <Header as='h2'>\n                <Header.Content>\n                  {props.claimedRewards}\n                  <Header.Subheader>Claimed Rewards</Header.Subheader>\n                </Header.Content>\n              </Header>\n            </Table.Cell>\n          </Table.Row>\n          <Table.Row>\n            <Table.Cell>\n              <Header as='h2'>\n                <Header.Content>\n                  {props.erasToClaim}\n                  <Header.Subheader>Number of unclaimed eras</Header.Subheader>\n                </Header.Content>\n              </Header>\n            </Table.Cell>\n            <Table.Cell>\n              <Header as='h2'>\n                <Header.Content>\n                  {props.unclaimedEras}\n                  <Header.Subheader>Unclaimed Eras</Header.Subheader>\n                </Header.Content>\n              </Header>\n            </Table.Cell>\n          </Table.Row>\n        </Table.Body>\n      </Table>\n    </div>\n  );\n}\n\nexport default function ContractExplorer (props) {\n  const { api } = useSubstrate();\n  return api ? <Main {...props} /> : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Statistic, Grid, Card, Icon } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\nconst DECIMALS = 1_000_000_000_000_000_000;\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const [era, setCurrentEra] = useState(0);\n  const [stakedTotal, setStakedTotal] = useState(0);\n  const [totalReward, setTotalRewards] = useState(0);\n  const [dappReward, setDappRewards] = useState(0);\n\n  useEffect(() => {\n    let unsubscribe;\n    api.query.dappsStaking.currentEra(e => {\n      setCurrentEra(e.toNumber());\n    });\n\n    api.query.dappsStaking.generalEraInfo(era, (result) => {\n      if (result.isNone) {\n        setStakedTotal('<None>');\n      } else {\n        const tvl = parseInt(result.unwrap().staked.valueOf() / DECIMALS / 1_000_000);\n        setStakedTotal(tvl);\n      }\n    })\n      .catch(console.error);\n\n    api.query.dappsStaking.blockRewardAccumulator((result) => {\n      if (result.isNone) {\n        setTotalRewards('<None>');\n      } else {\n        const totalReward = (parseInt(result.stakers) + parseInt(result.dapps)) / DECIMALS;\n        const dappReward = parseInt(result.dapps) / DECIMALS;\n        setTotalRewards(parseInt(totalReward));\n        setDappRewards(parseInt(dappReward));\n      }\n    })\n      .catch(console.error);\n\n    return () => unsubscribe;\n  }, [api.query.dappsStaking, era]);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content textAlign='center'>\n          <Statistic\n            label='TVL in dApps (mil)'\n            value={stakedTotal}\n          />\n        </Card.Content>\n        <Card.Content extra>\n\n          dapp rewards\n          <Icon name='hand point right outline' />\n          {dappReward} ({totalReward})\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n\nexport default function EraStaked (props) {\n  const { api } = useSubstrate();\n  return api.query.dappsStaking\n    ? <Main {...props} />\n    : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Statistic, Grid, Card, Icon, Progress } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const [era, setCurrentEra] = useState(0);\n  const [blockCountdown, setBlockCountdown] = useState(0);\n  const [progress, setProgress] = useState(0);\n\n  const blockPerEra = api.consts.dappsStaking.blockPerEra.toNumber();\n  const currentEra = api.query.dappsStaking.currentEra;\n  const bestNumber = api.derive.chain.bestNumber;\n\n  useEffect(() => {\n    let unsubscribeAll = null;\n\n    bestNumber(number => {\n      setProgress((number % blockPerEra) / blockPerEra * 100);\n      setBlockCountdown(blockPerEra - (number % blockPerEra));\n    })\n      .then(unsub => {\n        unsubscribeAll = unsub;\n      })\n      .catch(console.error);\n\n    api.query.dappsStaking.currentEra(e => {\n      setCurrentEra(e.toNumber());\n    }).catch(console.error);\n\n    return () => unsubscribeAll && unsubscribeAll();\n  }, [currentEra, bestNumber, blockPerEra, api.query.dappsStaking]);\n\n  return (\n    <Grid.Column>\n      <Card color='purple'>\n        <Card.Content textAlign='center'>\n          <Statistic\n            label='Current Era'\n            value={era}\n          />\n        </Card.Content>\n        <Card.Content extra>\n          Blocks until new era :\n          <Icon name='time' /> {blockCountdown}\n          <Progress percent={progress} indicating success />\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n\nexport default function CurrentEra (props) {\n  const { api } = useSubstrate();\n  return api.query.dappsStaking.currentEra\n    ? <Main {...props} />\n    : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Grid, Form, Dropdown, Input, Label } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\nimport { TxButton, TxGroupButton } from './substrate-lib/components';\n\nconst argIsOptional = (arg) =>\n  arg.type.toString().startsWith('Option<');\n\nfunction Main (props) {\n  const { api, jsonrpc } = useSubstrate();\n  const { accountPair } = props;\n  const [status, setStatus] = useState(null);\n\n  const [interxType, setInterxType] = useState('QUERY');\n  const [palletRPCs] = useState([{ key: 'dappsStaking', value: 'dappsStaking', text: 'dappsStaking' }]);\n  const [callables, setCallables] = useState([]);\n  const [paramFields, setParamFields] = useState([]);\n\n  const initFormState = {\n    palletRpc: '',\n    callable: '',\n    inputParams: []\n  };\n\n  const [formState, setFormState] = useState(initFormState);\n  const { palletRpc, callable, inputParams } = formState;\n\n  const getApiType = (api, interxType) => {\n    if (interxType === 'QUERY') {\n      return api.query;\n    } else if (interxType === 'EXTRINSIC') {\n      return api.tx;\n    } else if (interxType === 'RPC') {\n      return api.rpc;\n    } else {\n      return api.consts;\n    }\n  };\n\n  const updateCallables = () => {\n    if (!api || palletRpc === '') { return; }\n    const callables = Object.keys(getApiType(api, interxType)[palletRpc]).sort()\n      .map(c => ({ key: c, value: c, text: c }));\n    // console.log('updateCallables', callables);\n    setCallables(callables);\n  };\n\n  const updateParamFields = () => {\n    if (!api || palletRpc === '' || callable === '') {\n      setParamFields([]);\n      return;\n    }\n\n    let paramFields = [];\n\n    if (interxType === 'QUERY') {\n      // console.log('interxType QUERY');\n\n      const metaType = api.query[palletRpc][callable].meta.type;\n      // console.log('metaType = ', metaType);\n      if (metaType.isPlain) {\n        // Do nothing as `paramFields` is already set to []\n      } else if (metaType.isMap) {\n        // console.log('metaType isMap');\n        paramFields = [{\n          name: metaType.asMap.key.toString(),\n          type: metaType.asMap.key.toString(),\n          optional: false\n        }];\n        // console.log('paramFields = ', paramFields);\n      } else if (metaType.isDoubleMap) {\n        // console.log('metaType isDoubleMap');\n        paramFields = [{\n          name: metaType.asDoubleMap.key1.toString(),\n          type: metaType.asDoubleMap.key1.toString(),\n          optional: false\n        }, {\n          name: metaType.asDoubleMap.key2.toString(),\n          type: metaType.asDoubleMap.key2.toString(),\n          optional: false\n        }];\n        // console.log('paramFields = ', paramFields);\n      }\n    } else if (interxType === 'EXTRINSIC') {\n      // console.log('interxType EXTRINSIC');\n\n      const metaArgs = api.tx[palletRpc][callable].meta.args;\n\n      if (metaArgs && metaArgs.length > 0) {\n        paramFields = metaArgs.map(arg => ({\n          name: arg.name.toString(),\n          type: arg.type.toString(),\n          optional: argIsOptional(arg)\n        }));\n      }\n    } else if (interxType === 'RPC') {\n      let metaParam = [];\n\n      if (jsonrpc[palletRpc] && jsonrpc[palletRpc][callable]) {\n        metaParam = jsonrpc[palletRpc][callable].params;\n      }\n\n      if (metaParam.length > 0) {\n        paramFields = metaParam.map(arg => ({\n          name: arg.name,\n          type: arg.type,\n          optional: arg.isOptional || false\n        }));\n      }\n    } else if (interxType === 'CONSTANT') {\n      paramFields = [];\n    }\n\n    setParamFields(paramFields);\n  };\n\n  useEffect(updateCallables, [api, interxType, palletRpc]);\n  useEffect(updateParamFields, [api, interxType, palletRpc, callable, jsonrpc]);\n\n  const onPalletCallableParamChange = (_, data) => {\n    setFormState(formState => {\n      let res;\n      const { state, value } = data;\n      if (typeof state === 'object') {\n        // Input parameter updated\n        const { ind, paramField: { type } } = state;\n        const inputParams = [...formState.inputParams];\n        inputParams[ind] = { type, value };\n        res = { ...formState, inputParams };\n      } else if (state === 'palletRpc') {\n        res = { ...formState, [state]: value, callable: '', inputParams: [] };\n      } else if (state === 'callable') {\n        res = { ...formState, [state]: value, inputParams: [] };\n      }\n      return res;\n    });\n  };\n\n  const onInterxTypeChange = (ev, data) => {\n    setInterxType(data.value);\n    // clear the formState\n    setFormState(initFormState);\n  };\n\n  const getOptionalMsg = (interxType) =>\n    interxType === 'RPC'\n      ? 'Optional Parameter'\n      : 'Leaving this field as blank will submit a NONE value';\n\n  return (\n    <Grid.Column width={8}>\n      <h1>dApps-Staking Pallet Interactor</h1>\n      <Form>\n        <Form.Group style={{ overflowX: 'auto' }} inline>\n          <label>Interaction Type</label>\n          <Form.Radio\n            label='Extrinsic'\n            name='interxType'\n            value='EXTRINSIC'\n            checked={interxType === 'EXTRINSIC'}\n            onChange={onInterxTypeChange}\n          />\n          <Form.Radio\n            label='Query'\n            name='interxType'\n            value='QUERY'\n            checked={interxType === 'QUERY'}\n            onChange={onInterxTypeChange}\n          />\n          <Form.Radio\n            label='RPC'\n            name='interxType'\n            value='RPC'\n            checked={interxType === 'RPC'}\n            onChange={onInterxTypeChange}\n          />\n          <Form.Radio\n            label='Constant'\n            name='interxType'\n            value='CONSTANT'\n            checked={interxType === 'CONSTANT'}\n            onChange={onInterxTypeChange}\n          />\n        </Form.Group>\n        <Form.Field>\n          <Dropdown\n            placeholder='Pallets / RPC'\n            fluid\n            label='Pallet / RPC'\n            onChange={onPalletCallableParamChange}\n            search\n            selection\n            state='palletRpc'\n            value={palletRpc}\n            options={palletRPCs}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Dropdown\n            placeholder='Callables'\n            fluid\n            label='Callable'\n            onChange={onPalletCallableParamChange}\n            search\n            selection\n            state='callable'\n            value={callable}\n            options={callables}\n          />\n        </Form.Field>\n        {paramFields.map((paramField, ind) =>\n          <Form.Field key={`${paramField.name}-${paramField.type}`}>\n            <Input\n              placeholder={paramField.type}\n              fluid\n              type='text'\n              label={paramField.name}\n              state={{ ind, paramField }}\n              value={inputParams[ind] ? inputParams[ind].value : ''}\n              onChange={onPalletCallableParamChange}\n            />\n            {paramField.optional\n              ? <Label\n                basic\n                pointing\n                color='teal'\n                content={getOptionalMsg(interxType)}\n              />\n              : null\n            }\n          </Form.Field>\n        )}\n        <Form.Field style={{ textAlign: 'center' }}>\n          <InteractorSubmit\n            accountPair={accountPair}\n            setStatus={setStatus}\n            attrs={{ interxType, palletRpc, callable, inputParams, paramFields }}\n          />\n        </Form.Field>\n        <div style={{ overflowWrap: 'break-word' }}>{status}</div>\n      </Form>\n    </Grid.Column>\n  );\n}\n\nfunction InteractorSubmit (props) {\n  const { attrs: { interxType } } = props;\n  if (interxType === 'QUERY') {\n    // console.log('TxButton InteractorSubmit props = ', props);\n\n    return <TxButton\n      label='Query'\n      type='QUERY'\n      color='blue'\n      {...props}\n    />;\n  } else if (interxType === 'EXTRINSIC') {\n    return <TxGroupButton {...props} />;\n  } else if (interxType === 'RPC' || interxType === 'CONSTANT') {\n    return <TxButton\n      label='Submit'\n      type={interxType}\n      color='blue'\n      {...props}\n    />;\n  }\n}\n\nexport default function DSInteractor (props) {\n  const { api } = useSubstrate();\n  return api.tx ? <Main {...props} /> : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Statistic, Grid, Card, Icon, Progress } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const [dappsCount, setDappsCount] = useState(0);\n  const [contracts, setContracts] = useState([]);\n  const [numStakers, setNumStakers] = useState(0);\n  const [fillup, setFillup] = useState(0);\n\n  const getAddressEnum = (address) => (\n    { Evm: address }\n  );\n\n  useEffect(() => {\n    const calcProgress = async () => {\n      try {\n        const maxStakers = await api.consts.dappsStaking.maxNumberOfStakersPerContract.toNumber();\n        const available = dappsCount * maxStakers;\n        setFillup(numStakers / available * 100);\n      } catch (err) { console.error(err); }\n    };\n    calcProgress();\n  }, [dappsCount, api.consts.dappsStaking.maxNumberOfStakersPerContract, numStakers]);\n\n  useEffect(() => {\n    const fetchContracts = async () => {\n      try {\n        let result = await api.query.dappsStaking.registeredDapps.keys();\n        setDappsCount(result.length);\n        result = result.map(c => '0x' + c.toString().slice(-40));\n        setContracts(result);\n      } catch (err) { console.error(err); }\n    };\n    fetchContracts();\n  }, [api.query.dappsStaking]);\n\n  useEffect(() => {\n    const calcNumStakers = async () => {\n      const currentEra = (await api.query.dappsStaking.currentEra()).toNumber();\n      contracts.forEach(async selectedContract => {\n        // iterate from currentEra backwards until you find record for ContractEraStake\n        for (let era = currentEra; era > 0; era -= 1) {\n          try {\n            const stakingInfo = (await api.query.dappsStaking.contractEraStake(\n              getAddressEnum(selectedContract), era\n            )).toJSON();\n\n            if (stakingInfo !== null) {\n              // found record for ContractEraStake\n              const stakerNum = parseInt(stakingInfo.numberOfStakers);\n              setNumStakers(s => s + stakerNum);\n              break;\n            }\n          } catch (err) {\n            console.error(err);\n            console.log('DappsCount contractEraStake.entries failed');\n          }\n        }\n      });\n    };\n    calcNumStakers();\n  }, [api.query.dappsStaking, contracts]);\n\n  useEffect(() => {\n    console.log('Registering for events');\n    api.query.system.events((events) => {\n      events.forEach(async (record) => {\n        const { event } = record;\n\n        if (event.section === 'dappsStaking' && event.method === 'NewContract') {\n          const result = await api.query.dappsStaking.registeredDapps.keys();\n          console.log('dappsCount =', result.length);\n          setDappsCount(result.length);\n        }\n      });\n    });\n  }, [api.query.dappsStaking.registeredDapps, api.query.system]);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content textAlign='center'>\n          <Statistic\n            label='dApps Count'\n            value={dappsCount}\n          />\n        </Card.Content>\n        <Card.Content extra>\n          Stakers Cnt and Capacity:\n          <Icon name='user' /> {numStakers}\n          <Progress percent={fillup} indicating warning />\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n\nexport default function DappsCount (props) {\n  const { api } = useSubstrate();\n  return api.query.dappsStaking &&\n    api.query.dappsStaking.registeredDapps\n    ? <Main {...props} />\n    : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Card, Icon, Grid } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main (props) {\n  const { api, socket } = useSubstrate();\n  const [nodeInfo, setNodeInfo] = useState({});\n\n  useEffect(() => {\n    const getInfo = async () => {\n      try {\n        const [chain, nodeName, nodeVersion] = await Promise.all([\n          api.rpc.system.chain(),\n          api.rpc.system.name(),\n          api.rpc.system.version()\n        ]);\n        setNodeInfo({ chain, nodeName, nodeVersion });\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    getInfo();\n  }, [api.rpc.system]);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content>\n          <Card.Header>{nodeInfo.nodeName}</Card.Header>\n          <Card.Meta>\n            <span>{nodeInfo.chain}</span>\n          </Card.Meta>\n          <Card.Description>{socket}</Card.Description>\n        </Card.Content>\n        <Card.Content extra>\n          <Icon name='setting' />v{nodeInfo.nodeVersion}\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n\nexport default function NodeInfo (props) {\n  const { api } = useSubstrate();\n  return api.rpc &&\n    api.rpc.system &&\n    api.rpc.system.chain &&\n    api.rpc.system.name &&\n    api.rpc.system.version\n    ? <Main {...props} />\n    : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Icon, Step } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\nconst DECIMALS = 1_000_000_000_000_000_000;\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const [blocksPerEra, setBlocksPerEra] = useState(0);\n  const [maxStakers, setMaxStakers] = useState(0);\n  const [minStaking, setMinStaking] = useState(0);\n\n  useEffect(() => {\n    let unsubscribe;\n    const blockPerEra = api.consts.dappsStaking.blockPerEra.toNumber();\n    setBlocksPerEra(blockPerEra);\n    const stakers = api.consts.dappsStaking.maxNumberOfStakersPerContract.toNumber();\n    setMaxStakers(stakers);\n    const stakingAmount = api.consts.dappsStaking.minimumStakingAmount.valueOf();\n    setMinStaking(parseInt(stakingAmount / DECIMALS));\n    return () => unsubscribe;\n  }, [api.consts]);\n\n  return (\n    <Step.Group>\n      <Step active>\n        <Icon name='truck' />\n        <Step.Content>\n          <Step.Title>{blocksPerEra}</Step.Title>\n          <Step.Description>Blocks per Era</Step.Description>\n        </Step.Content>\n      </Step>\n\n      <Step active>\n        <Icon name='user' />\n        <Step.Content>\n          <Step.Title>{maxStakers}</Step.Title>\n          <Step.Description>Max Stakers per contract </Step.Description>\n        </Step.Content>\n      </Step>\n\n      <Step active>\n        <Icon name='money bill alternate' />\n        <Step.Content>\n          <Step.Title>{minStaking}</Step.Title>\n          <Step.Description>Minimum staking amount </Step.Description>\n        </Step.Content>\n      </Step>\n    </Step.Group>\n  );\n}\n\nexport default function Constants (props) {\n  const { api } = useSubstrate();\n  return api.consts\n    ? <Main {...props} />\n    : null;\n}\n","import React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport config from './config';\n\nimport {\n  Dropdown,\n  Container\n} from 'semantic-ui-react';\n\nfunction Main (props) {\n  const [networkSelected, setNetworkSelected] = useState('');\n\n  const networkOptions =\n    [\n      {\n        key: 'Astar', text: 'Astar (mainnet)', value: 'wss://astar.api.onfinality.io/public-ws'\n      },\n      {\n        key: 'Shiden', text: 'Shiden (mainnet)', value: 'wss://shiden.api.onfinality.io/public-ws'\n      },\n      {\n        key: 'Shibuya', text: 'Shibuya (testnet)', value: 'wss://rpc.shibuya.astar.network'\n      },\n      {\n        key: 'Local', text: 'Local', value: 'ws://127.0.0.1:9944'\n      }\n    ];\n\n  // Set the initial address\n  useEffect(() => {\n    const parsedQuery = queryString.parseUrl(window.location.search);\n    setNetworkSelected(parsedQuery.query.rpc || config.PROVIDER_SOCKET);\n  }, []);\n\n  const onChange = network => {\n    setNetworkSelected(network);\n\n    const parsedQuery = queryString.parseUrl(window.location.search);\n    parsedQuery.query.rpc = network;\n    window.location = queryString.stringifyUrl(parsedQuery);\n  };\n\n  return (\n    <Container>\n      <Dropdown\n        search\n        selection\n        clearable\n        placeholder='Select the Network'\n        options={networkOptions}\n        onChange={(_, dropdown) => {\n          onChange(dropdown.value);\n        }}\n        value={networkSelected}\n      />\n    </Container>\n  );\n}\n\nexport default function Network (props) {\n  return <Main {...props} />;\n}\n","import React, { useState, createRef } from 'react';\nimport { Container, Dimmer, Loader, Grid, Sticky, Message, Segment, Image, Divider } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\n\nimport { SubstrateContextProvider, useSubstrate } from './substrate-lib';\nimport { DeveloperConsole } from './substrate-lib/components';\n\n// import NetworkSelector from './NetworkSelector';\nimport ContractExplorer from './ContractExplorer';\n// import Balances from './Balances';\nimport EraStaked from './EraStaked';\n// import BlockNumber from './BlockNumber';\nimport EraNumber from './EraNumber';\nimport DSInteractor from './DSInteractor';\nimport DappsCount from './DappsCount';\n// import Metadata from './Metadata';\nimport NodeInfo from './NodeInfo';\nimport Constants from './Constants';\nimport Network from './Network';\n// import AllContracts from './AllContracts';\n\n// import Transfer from './Transfer';\n// import Upgrade from './Upgrade';\n\nfunction Main () {\n  const [accountAddress] = useState(null);\n  const { apiState, keyring, keyringState, apiError } = useSubstrate();\n  const accountPair =\n    accountAddress &&\n    keyringState === 'READY' &&\n    keyring.getPair(accountAddress);\n\n  const loader = text =>\n    <Dimmer active>\n      <Loader size='small'>{text}</Loader>\n    </Dimmer>;\n\n  const message = err =>\n    <Grid centered columns={2} padded>\n      <Grid.Column>\n        <Message negative compact floating\n          header='Error Connecting to Substrate'\n          content={`${JSON.stringify(err, null, 4)}`}\n        />\n      </Grid.Column>\n      <Grid.Column>\n        <Network />\n      </Grid.Column>\n    </Grid>;\n\n  if (apiState === 'ERROR') return message(apiError);\n  else if (apiState !== 'READY') return loader('Connecting to Substrate');\n\n  if (keyringState !== 'READY') {\n    return loader('Loading accounts (please review any extension\\'s authorization)');\n  }\n\n  const contextRef = createRef();\n\n  return (\n    <div ref={contextRef}>\n      <Sticky context={contextRef}>\n        <Grid centered columns={2}>\n\n        </Grid>\n      </Sticky>\n      <Divider />\n      <Container>\n        <style>\n          {`\n            html, body {\n              background-color: #252839 !important;\n            }\n            p {\n              align-content: center;\n              background-color: #495285;\n              color: #fff;\n              display: flex;\n              flex-direction: column;\n              justify-content: center;\n              min-height: 6em;\n            }\n            p > span {\n              opacity: 0.4;\n              text-align: center;\n            }\n          }\n          `}\n        </style>\n        <Grid stackable columns='equal'>\n          <Grid.Row>\n            <Image src={`${process.env.PUBLIC_URL}/assets/astar_dashboard.png`} size='huge' />\n            <Network />\n          </Grid.Row>\n          <Grid.Row stretched>\n            <EraNumber />\n            <DappsCount />\n            <EraStaked />\n            <NodeInfo />\n          </Grid.Row>\n          <Divider />\n          <Grid.Row>\n            <Constants />\n          </Grid.Row>\n          <Divider />\n          {/* <Grid.Row stretched>\n            <Balances />\n          </Grid.Row> */}\n          {/* <Grid.Row>\n            <Transfer accountPair={accountPair} />\n            <Upgrade accountPair={accountPair} />\n          </Grid.Row> */}\n          <Grid.Row>\n            <Segment raised>\n              <ContractExplorer />\n            </Segment>\n          </Grid.Row>\n          <Divider />\n          {/* <Grid.Row>\n            <AllContracts/>\n          </Grid.Row> */}\n          <Grid.Row>\n            <Segment raised>\n              <DSInteractor accountPair={accountPair} />\n            </Segment>\n          </Grid.Row>\n        </Grid>\n      </Container>\n      <DeveloperConsole />\n    </div>\n  );\n}\n\nexport default function App () {\n  return (\n    <SubstrateContextProvider>\n      <Main />\n    </SubstrateContextProvider>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}